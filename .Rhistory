scale_fill_gradient(low = "#E55D87", high =  "#5FC3E4") +
coord_flip()
pl
}
if (p=="All"){
s.hit.plt.df <- subset(s.all.hit,s.all.hit$league_abbr == z & s.all.hit$year == w)
}else if(p=='OF'){
s.hit.plt.df <- subset(s.all.hit,s.all.hit$league_abbr == z & s.all.hit$year == w & s.all.hit$Position %in% c('LF','CF','RF'))
}else{
s.hit.plt.df <- subset(s.all.hit,s.all.hit$league_abbr == z & s.all.hit$year == w & s.all.hit$Position == p)
}
# if PBE subset dataframe by plate appearances greater than or equal to 760, if MiLPBE subset by PA greater than or equal to 470
if(x %in% c('Average','OBP','SLG','OPS','ISO','BABIP','K Percent','BB Percent','K-BB Percent','Strikeouts')){
mean_pa <- round(mean(s.hit.plt.df$`Plate Apperances`),0)
s.hit.plt.df <- subset(s.hit.plt.df,s.hit.plt.df$`Plate Apperances`>=mean_pa)
} else {
s.hit.plt.df <- s.hit.plt.df
}
# find which column number the statistic variable is in the dataframe
num <- which( colnames(s.hit.plt.df)==x)
# if statistic is K percent or K-BB percent, take the bottom obs, players with lower k-percents are better
if(x %in% c("K Percent", "K-BB Percent",'Strikeouts','GDP')){
s.hit.plt.df <- top_n(s.hit.plt.df, n=y, -s.hit.plt.df[num])
} else {
s.hit.plt.df <- top_n(s.hit.plt.df, n=y, s.hit.plt.df[num])
}
# condense dataframe down to 2 columns: team & name & position, the statistic variable column
s.hit.plt.df <- s.hit.plt.df[c(43,as.numeric(num))]
#rename columns to x,y for easier plotting
colnames(s.hit.plt.df) <- c("pl.x","pl.y")
View(s.hit.plt.df)
if (p=="All"){
s.hit.plt.df <- subset(s.all.hit,s.all.hit$league_abbr == z & s.all.hit$year == w)
}else if(p=='OF'){
s.hit.plt.df <- subset(s.all.hit,s.all.hit$league_abbr == z & s.all.hit$year == w & s.all.hit$Position %in% c('LF','CF','RF'))
}else{
s.hit.plt.df <- subset(s.all.hit,s.all.hit$league_abbr == z & s.all.hit$year == w & s.all.hit$Position == p)
}
# if PBE subset dataframe by plate appearances greater than or equal to 760, if MiLPBE subset by PA greater than or equal to 470
if(x %in% c('Average','OBP','SLG','OPS','ISO','BABIP','K Percent','BB Percent','K-BB Percent','Strikeouts','GDP')){
mean_pa <- round(mean(s.hit.plt.df$`Plate Apperances`),0)
s.hit.plt.df <- subset(s.hit.plt.df,s.hit.plt.df$`Plate Apperances`>=mean_pa)
} else {
s.hit.plt.df <- s.hit.plt.df
}
# find which column number the statistic variable is in the dataframe
num <- which( colnames(s.hit.plt.df)==x)
# if statistic is K percent or K-BB percent, take the bottom obs, players with lower k-percents are better
if(x %in% c("K Percent", "K-BB Percent",'Strikeouts','GDP')){
s.hit.plt.df <- top_n(s.hit.plt.df, n=y, -s.hit.plt.df[num])
} else {
s.hit.plt.df <- top_n(s.hit.plt.df, n=y, s.hit.plt.df[num])
}
# condense dataframe down to 2 columns: team & name & position, the statistic variable column
s.hit.plt.df <- s.hit.plt.df[c(43,as.numeric(num))]
#rename columns to x,y for easier plotting
colnames(s.hit.plt.df) <- c("pl.x","pl.y")
s.hit.plt.df <- filter(s.hit.plt.df, pl.y != 0)
# plotting funtion, if statistic is k percetn or k-bb percent, plot in reverse order
if(x %in% c("K Percent", "K-BB Percent",'Strikeouts','GDP')){
pl <-  ggplot(s.hit.plt.df, aes(x=reorder(pl.x,-pl.y), y=pl.y,fill=pl.y))+
geom_bar(stat='identity')+
ggtitle(paste(w,"Season -","Top",length(s.hit.plt.df$pl.x), "Hitters -",p), subtitle =paste(x,"-", z)) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=s.hit.plt.df,aes(x=pl.x,y=pl.y,label=pl.y),size = 4, hjust=1, colour = "black") +
scale_y_continuous(toupper(x)) +
theme(axis.title.y = element_blank()) +
theme(axis.text.y = element_text(face="bold", size = 10))+
theme(legend.position = "none") +
scale_fill_gradient(low = "#5FC3E4", high =  "#E55D87")  +
coord_flip()
pl
} else {
pl <-  ggplot(s.hit.plt.df, aes(x=reorder(pl.x,pl.y), y=pl.y,fill=pl.y))+
geom_bar(stat='identity')+
ggtitle(paste(w,"Season -","Top",length(s.hit.plt.df$pl.x), "Hitters -",p), subtitle =paste(x,"-", z)) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=s.hit.plt.df,aes(x=pl.x,y=pl.y,label=pl.y),size = 4, hjust=1, colour = "black") +
scale_y_continuous(toupper(x)) +
theme(axis.title.y = element_blank()) +
theme(axis.text.y = element_text(face="bold", size = 10))+
theme(legend.position = "none") +
scale_fill_gradient(low = "#E55D87", high =  "#5FC3E4") +
coord_flip()
pl
}
if (p=="All"){
s.hit.plt.df <- subset(s.all.hit,s.all.hit$league_abbr == z & s.all.hit$year == w)
}else if(p=='OF'){
s.hit.plt.df <- subset(s.all.hit,s.all.hit$league_abbr == z & s.all.hit$year == w & s.all.hit$Position %in% c('LF','CF','RF'))
}else{
s.hit.plt.df <- subset(s.all.hit,s.all.hit$league_abbr == z & s.all.hit$year == w & s.all.hit$Position == p)
}
View(s.hit.plt.df)
runApp('PBE_App.R')
runApp('PBE_App.R')
suppressMessages(library(tidyverse))
suppressMessages(library(dplyr))
suppressMessages(library(ggplot2))
suppressMessages(library(stringr))
suppressMessages(library(RColorBrewer))
setwd("~/Documents/GitHub/PBE/")
c.records <- read.csv("Exports/team_record.csv")
c.games_played <- max(c.records$g)
c.x_pl <- read.csv('Exports/players.csv',header = TRUE)
c.x_pl$full_name <- paste(c.x_pl$first_name,c.x_pl$last_name)
c.positions <- data.frame('position' = 1:10, 'position_name' = c('P','C','1B','2B','3B','SS','LF','CF','RF','DH'))
c.combined.players <- merge(c.x_pl,c.positions,by = "position", all.x = TRUE)
c.pl_name_lookup <- c.combined.players[c(2,5,99,100)]
c.player_career_batting  <- read.csv('Exports/players_career_batting_stats.csv',header = TRUE)
c.player_career_batting <- subset(c.player_career_batting,c.player_career_batting$split_id == 1)
c.bats <- c.player_career_batting[,c(1:3,5,9:11,12:14,16:21,23:25,27:28,32)]
colnames(c.bats)[colnames(c.bats) == 'k'] <- 'SO'
colnames(c.bats)[colnames(c.bats) == 'd'] <- 'Dbl'
colnames(c.bats)[colnames(c.bats) == 't'] <- 'Trp'
colnames(c.bats)[colnames(c.bats) == 't'] <- 'Trp'
c.bats$year <- NULL
c.bats$team_id <- NULL
c.bats <- subset(c.bats,c.bats$league_id != 1000)
c.bats <- c.bats %>%
group_by(player_id, league_id) %>%
summarise_all(funs(sum))
c.player_career_fielding <- read.csv('Exports/players_career_fielding_stats.csv',header = TRUE)
c.fielding <- c.player_career_fielding[c(1:4,37)]
c.fielding$year <- NULL
c.fielding$team_id <- NULL
c.fielding <- subset(c.fielding,c.fielding$league_id != 1000)
c.fielding <- c.fielding %>%
group_by(player_id, league_id) %>%
summarise_all(funs(sum))
c.player_career_pitching <- read.csv('Exports/players_career_pitching_stats.csv',header = TRUE)
c.player_career_pitching <- subset(c.player_career_pitching,c.player_career_pitching$split_id == 1)
c.pitch <- c.player_career_pitching[,c(1:3,5,8:12,15:17,22,24:26,30,32,40,44,45,48,55,23)]
colnames(c.pitch)[colnames(c.pitch) == 'bb'] <- 'walks'
colnames(c.pitch)[colnames(c.pitch) == 'ab'] <- 'p_ab'
colnames(c.pitch)[colnames(c.pitch) == 'tb'] <- 'p_tb'
colnames(c.pitch)[colnames(c.pitch) == 'r'] <- 'p_r'
colnames(c.pitch)[colnames(c.pitch) == 'sf'] <- 'p_sf'
colnames(c.pitch)[colnames(c.pitch) == 'g'] <- 'p_g'
colnames(c.pitch)[colnames(c.pitch) == 'gs'] <- 'p_gs'
c.pitch$year <- NULL
c.pitch$team_id <- NULL
c.pitch <- subset(c.pitch,c.pitch$league_id != 1000)
c.pitch <- c.pitch %>%
group_by(player_id,league_id) %>%
summarise_all(list(sum))
c.all <- merge(c.bats,c.pitch,by=c('player_id','league_id'),all=TRUE)
c.all <- merge(c.all,c.fielding,by=c('player_id','league_id'),c.all=TRUE)
c.all[is.na(c.all)] <- 0
c.all$war <- round(c.all$war.x + c.all$war.y,2)
c.all$war.x <- NULL
c.all$war.y <- NULL
c.all <- subset(c.all,c.all$league_id<1000)
c.all$avg <- round(c.all$h/c.all$ab,3)
c.all$obp <- round((c.all$h + c.all$bb + c.all$ibb + c.all$hp)/(c.all$ab + c.all$bb + c.all$ibb + c.all$hp + c.all$sf),3)
c.all$sin <- c.all$h - c.all$Dbl - c.all$Trp - c.all$hr
c.all$rc <- round(((c.all$h+(c.all$bb + c.all$ibb + c.all$hp))*((1*c.all$sin)+(2*c.all$Dbl)+(3*c.all$Trp)+(4*c.all$hr)))/(c.all$ab+(c.all$bb + c.all$ibb + c.all$hp)),0)
c.all$tb <- (1*c.all$sin)+(2*c.all$Dbl)+(3*c.all$Trp)+(4*c.all$hr)
c.all$slg <- round(c.all$tb/c.all$ab,3)
c.all$ops <- c.all$obp + c.all$slg
c.all$iso <- c.all$slg - c.all$avg
c.all$b_babip <- round((c.all$h - c.all$hr)/(c.all$ab - c.all$SO - c.all$hr+c.all$sf),3)
c.all$bat_k_pcnt <- round(c.all$SO / c.all$pa,2)
c.all$bat_bb_pcnt <- round(c.all$bb / c.all$pa,2)
c.all$bat_k_bb_pcnt <- c.all$bat_k_pcnt - c.all$bat_bb_pcnt
c.all$era <- round(((9*c.all$er)/c.all$ip),3)
c.all$whip <- round((c.all$ha + c.all$walks)/c.all$ip,3)
c.all$p_babip <- round((c.all$ha - c.all$hra)/(c.all$p_ab - c.all$k - c.all$hra+c.all$p_sf),3)
c.all$fip <- round(((13*c.all$hra+3*c.all$walks-2*c.all$k)/c.all$ip)+3.1,2)
c.all$HR_per_9 <- round(9 * (c.all$hra/c.all$ip),2)
c.all$R_per_9 <- round(9 * (c.all$p_r/c.all$ip),2)
c.all$H_per_9 <- round(9 * (c.all$ha/c.all$ip),2)
c.all$K_per_9 <- round(9 * (c.all$k/c.all$ip),2)
c.all$BB_per_9 <- round(9 * (c.all$walks/c.all$ip),2)
c.all$pit_k_pcnt <- round(c.all$k / c.all$p_ab,2)
c.all$pit_bb_pcnt <- round(c.all$walks / c.all$p_ab,2)
c.all$pit_k_bb_pcnt <- c.all$pit_k_pcnt - c.all$pit_bb_pcnt
c.all$win_percent <- round(c.all$w / (c.all$w + c.all$l),3)
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
c.all <- merge(c.all, c.pl_name_lookup, by = 'player_id')
c.all$full_name <- str_replace_all(c.all$full_name,"-","")
c.leagues <- read.csv("Exports/leagues.csv", header = TRUE)
c.leagues <- c.leagues[c(1,3)]
colnames(c.leagues)[colnames(c.leagues) == 'abbr'] <- 'league_abbr'
c.all <- merge(c.all,c.leagues,all.x = TRUE)
c.all[is.nan(c.all)] <- 0
c.all$zr[is.na(c.all$zr)] <- 0
c.all$winloss <- paste(c.all$w,"-",c.all$l)
c.all$name_pos <- paste(c.all$full_name, "-",c.all$position_name)
c.all$url <- paste("http://www.pbesim.com/players/player_",c.all$player_id,".html", sep = "")
c.all$pitch_hit <- ifelse(c.all$position_name != 'P','Hitter','Pitcher')
c.all.hit <- subset(c.all,c.all$pitch_hit == 'Hitter')
c.all.hit$role <- NULL
c.all.hit$p_gs <- NULL
c.all.pitch <- subset(c.all, c.all$pitch_hit == "Pitcher")
suppressMessages(library(tidyverse))
suppressMessages(library(dplyr))
suppressMessages(library(ggplot2))
suppressMessages(library(stringr))
suppressMessages(library(RColorBrewer))
setwd("~/Documents/GitHub/PBE/")
c.records <- read.csv("Exports/team_record.csv")
c.games_played <- max(c.records$g)
c.x_pl <- read.csv('Exports/players.csv',header = TRUE)
c.x_pl$full_name <- paste(c.x_pl$first_name,c.x_pl$last_name)
c.positions <- data.frame('position' = 1:10, 'position_name' = c('P','C','1B','2B','3B','SS','LF','CF','RF','DH'))
c.combined.players <- merge(c.x_pl,c.positions,by = "position", all.x = TRUE)
c.pl_name_lookup <- c.combined.players[c(2,5,99,100)]
c.player_career_batting  <- read.csv('Exports/players_career_batting_stats.csv',header = TRUE)
c.player_career_batting <- subset(c.player_career_batting,c.player_career_batting$split_id == 1)
c.bats <- c.player_career_batting[,c(1:3,5,9:11,12:14,16:21,23:25,27:28,32)]
colnames(c.bats)[colnames(c.bats) == 'k'] <- 'SO'
colnames(c.bats)[colnames(c.bats) == 'd'] <- 'Dbl'
colnames(c.bats)[colnames(c.bats) == 't'] <- 'Trp'
colnames(c.bats)[colnames(c.bats) == 't'] <- 'Trp'
c.bats$year <- NULL
c.bats$team_id <- NULL
c.bats <- subset(c.bats,c.bats$league_id != 1000)
c.bats <- c.bats %>%
group_by(player_id, league_id) %>%
summarise_all(funs(sum))
c.player_career_fielding <- read.csv('Exports/players_career_fielding_stats.csv',header = TRUE)
c.fielding <- c.player_career_fielding[c(1:4,37)]
c.fielding$year <- NULL
c.fielding$team_id <- NULL
c.fielding <- subset(c.fielding,c.fielding$league_id != 1000)
c.fielding <- c.fielding %>%
group_by(player_id, league_id) %>%
summarise_all(funs(sum))
c.player_career_pitching <- read.csv('Exports/players_career_pitching_stats.csv',header = TRUE)
c.player_career_pitching <- subset(c.player_career_pitching,c.player_career_pitching$split_id == 1)
c.pitch <- c.player_career_pitching[,c(1:3,5,8:12,15:17,22,24:26,30,32,40,44,45,48,55,23)]
colnames(c.pitch)[colnames(c.pitch) == 'bb'] <- 'walks'
colnames(c.pitch)[colnames(c.pitch) == 'ab'] <- 'p_ab'
colnames(c.pitch)[colnames(c.pitch) == 'tb'] <- 'p_tb'
colnames(c.pitch)[colnames(c.pitch) == 'r'] <- 'p_r'
colnames(c.pitch)[colnames(c.pitch) == 'sf'] <- 'p_sf'
colnames(c.pitch)[colnames(c.pitch) == 'g'] <- 'p_g'
colnames(c.pitch)[colnames(c.pitch) == 'gs'] <- 'p_gs'
c.pitch$year <- NULL
c.pitch$team_id <- NULL
c.pitch <- subset(c.pitch,c.pitch$league_id != 1000)
c.pitch <- c.pitch %>%
group_by(player_id,league_id) %>%
summarise_all(list(sum))
c.all <- merge(c.bats,c.pitch,by=c('player_id','league_id'),all=TRUE)
c.all <- merge(c.all,c.fielding,by=c('player_id','league_id'),c.all=TRUE)
c.all[is.na(c.all)] <- 0
c.all$war <- round(c.all$war.x + c.all$war.y,2)
c.all$war.x <- NULL
c.all$war.y <- NULL
c.all <- subset(c.all,c.all$league_id<1000)
c.all$avg <- round(c.all$h/c.all$ab,3)
c.all$obp <- round((c.all$h + c.all$bb + c.all$ibb + c.all$hp)/(c.all$ab + c.all$bb + c.all$ibb + c.all$hp + c.all$sf),3)
c.all$sin <- c.all$h - c.all$Dbl - c.all$Trp - c.all$hr
c.all$rc <- round(((c.all$h+(c.all$bb + c.all$ibb + c.all$hp))*((1*c.all$sin)+(2*c.all$Dbl)+(3*c.all$Trp)+(4*c.all$hr)))/(c.all$ab+(c.all$bb + c.all$ibb + c.all$hp)),0)
c.all$tb <- (1*c.all$sin)+(2*c.all$Dbl)+(3*c.all$Trp)+(4*c.all$hr)
c.all$slg <- round(c.all$tb/c.all$ab,3)
c.all$ops <- c.all$obp + c.all$slg
c.all$iso <- c.all$slg - c.all$avg
c.all$b_babip <- round((c.all$h - c.all$hr)/(c.all$ab - c.all$SO - c.all$hr+c.all$sf),3)
c.all$bat_k_pcnt <- round(c.all$SO / c.all$pa,2)
c.all$bat_bb_pcnt <- round(c.all$bb / c.all$pa,2)
c.all$bat_k_bb_pcnt <- c.all$bat_k_pcnt - c.all$bat_bb_pcnt
c.all$era <- round(((9*c.all$er)/c.all$ip),3)
c.all$whip <- round((c.all$ha + c.all$walks)/c.all$ip,3)
c.all$p_babip <- round((c.all$ha - c.all$hra)/(c.all$p_ab - c.all$k - c.all$hra+c.all$p_sf),3)
c.all$fip <- round(((13*c.all$hra+3*c.all$walks-2*c.all$k)/c.all$ip)+3.1,2)
c.all$HR_per_9 <- round(9 * (c.all$hra/c.all$ip),2)
c.all$R_per_9 <- round(9 * (c.all$p_r/c.all$ip),2)
c.all$H_per_9 <- round(9 * (c.all$ha/c.all$ip),2)
c.all$K_per_9 <- round(9 * (c.all$k/c.all$ip),2)
c.all$BB_per_9 <- round(9 * (c.all$walks/c.all$ip),2)
c.all$pit_k_pcnt <- round(c.all$k / c.all$p_ab,2)
c.all$pit_bb_pcnt <- round(c.all$walks / c.all$p_ab,2)
c.all$pit_k_bb_pcnt <- c.all$pit_k_pcnt - c.all$pit_bb_pcnt
c.all$win_percent <- round(c.all$w / (c.all$w + c.all$l),3)
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
c.all <- merge(c.all, c.pl_name_lookup, by = 'player_id')
c.all$full_name <- str_replace_all(c.all$full_name,"-","")
c.leagues <- read.csv("Exports/leagues.csv", header = TRUE)
c.leagues <- c.leagues[c(1,3)]
colnames(c.leagues)[colnames(c.leagues) == 'abbr'] <- 'league_abbr'
c.all <- merge(c.all,c.leagues,all.x = TRUE)
c.all[is.nan(c.all)] <- 0
c.all$zr[is.na(c.all$zr)] <- 0
c.all$winloss <- paste(c.all$w,"-",c.all$l)
c.all$name_pos <- paste(c.all$full_name, "-",c.all$position_name)
c.all$url <- paste("http://www.pbesim.com/players/player_",c.all$player_id,".html", sep = "")
c.all$pitch_hit <- ifelse(c.all$position_name != 'P','Hitter','Pitcher')
c.all.hit <- subset(c.all,c.all$pitch_hit == 'Hitter')
c.all.hit$role <- NULL
c.all.hit$p_gs <- NULL
c.all.pitch <- subset(c.all, c.all$pitch_hit == "Pitcher")
View(c.all.hit)
c.all.hit <- c.all.hit[-c(20:37,52:64,68)]
colnames(c.all.hit)[colnames(c.all.hit) == 'ab'] <- 'At Bats'
colnames(c.all.hit)[colnames(c.all.hit) == 'h'] <- 'Hits'
colnames(c.all.hit)[colnames(c.all.hit) == 'SO'] <- 'Strikeouts'
colnames(c.all.hit)[colnames(c.all.hit) == 'pa'] <- 'Plate Apperances'
colnames(c.all.hit)[colnames(c.all.hit) == 'g'] <- 'Games'
colnames(c.all.hit)[colnames(c.all.hit) == 'Dbl'] <- 'Doubles'
colnames(c.all.hit)[colnames(c.all.hit) == 'Trp'] <- 'Triples'
colnames(c.all.hit)[colnames(c.all.hit) == 'hr'] <- 'Homeruns'
colnames(c.all.hit)[colnames(c.all.hit) == 'r'] <- 'Runs'
colnames(c.all.hit)[colnames(c.all.hit) == 'rbi'] <- 'RBI'
colnames(c.all.hit)[colnames(c.all.hit) == 'sb'] <- 'Stolen Bases'
colnames(c.all.hit)[colnames(c.all.hit) == 'bb'] <- 'Walks'
colnames(c.all.hit)[colnames(c.all.hit) == 'zr'] <- 'Zone Rating'
colnames(c.all.hit)[colnames(c.all.hit) == 'war'] <- 'WAR'
colnames(c.all.hit)[colnames(c.all.hit) == 'avg'] <- 'Average'
colnames(c.all.hit)[colnames(c.all.hit) == 'obp'] <- 'OBP'
colnames(c.all.hit)[colnames(c.all.hit) == 'sin'] <- 'Single'
colnames(c.all.hit)[colnames(c.all.hit) == 'rc'] <- 'Runs Created'
colnames(c.all.hit)[colnames(c.all.hit) == 'tb'] <- 'Total Bases'
colnames(c.all.hit)[colnames(c.all.hit) == 'slg'] <- 'SLG'
colnames(c.all.hit)[colnames(c.all.hit) == 'ops'] <- 'OPS'
colnames(c.all.hit)[colnames(c.all.hit) == 'iso'] <- 'ISO'
colnames(c.all.hit)[colnames(c.all.hit) == 'b_babip'] <- 'BABIP'
colnames(c.all.hit)[colnames(c.all.hit) == 'bat_k_pcnt'] <- 'K Percent'
colnames(c.all.hit)[colnames(c.all.hit) == 'bat_bb_pcnt'] <- 'BB Percent'
colnames(c.all.hit)[colnames(c.all.hit) == 'bat_k_bb_pcnt'] <- 'K-BB Percent'
colnames(c.all.hit)[colnames(c.all.hit) == 'position_name'] <- 'Position'
colnames(c.all.hit)[colnames(c.all.hit) == 'gdp'] <- 'GDP'
View(c.all.hit)
c.all.h.cnames <- colnames(c.all.hit[c(3:6,8:15,17,20:33)])
c.all.h.cnames <- sort(c.all.h.cnames)
c.all.pitch$pitcher_position <- ifelse(c.all.pitch$p_gs > 0,"SP","RP")
c.all.pitch$role <- NULL
c.all.pitch$p_gs <- NULL
c.all.pitch$name_pos <- paste(c.all.pitch$full_name, "-", c.all.pitch$pitcher_position)
View(c.all.pitch)
source('~/Documents/GitHub/PBE/Codes/All-Time_Stats.R')
source('~/.active-rstudio-document')
p <- 'All'
z <- 'PBE'
x <- 'WAR'
y <- 10
source('~/.active-rstudio-document')
# plotting funtion, if statistic is k percetn or k-bb percent, plot in reverse order
if(x %in% c("K Percent", "K-BB Percent",'Strikeouts','GDP')){
pl <-  ggplot(hit.plt.df, aes(x=reorder(pl.x,-pl.y), y=pl.y,fill=pl.y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(hit.plt.df$pl.x),"Hitters All-Time -",p), subtitle =paste(x,"-", z)) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=hit.plt.df,aes(x=pl.x,y=pl.y,label=pl.y),size = 4, hjust=1, colour = "black") +
scale_y_continuous(toupper(x)) +
theme(axis.title.y = element_blank()) +
theme(axis.text.y = element_text(face="bold", size = 10))+
theme(legend.position = "none") +
scale_fill_gradient(low = "#5FC3E4", high =  "#E55D87")  +
coord_flip()
pl
} else {
pl <-  ggplot(hit.plt.df, aes(x=reorder(pl.x,pl.y), y=pl.y,fill=pl.y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(hit.plt.df$pl.x),"Hitters All-Time -",p), subtitle =paste(x,"-", z))  +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=hit.plt.df,aes(x=pl.x,y=pl.y,label=pl.y),size = 4, hjust=1, colour = "black") +
scale_y_continuous(toupper(x)) +
theme(axis.title.y = element_blank()) +
theme(axis.text.y = element_text(face="bold", size = 10))+
theme(legend.position = "none") +
scale_fill_gradient(low = "#E55D87", high =  "#5FC3E4")  +
coord_flip()
pl
}
source('~/.active-rstudio-document')
# plotting funtion, if statistic is k percetn or k-bb percent, plot in reverse order
if(x %in% c("K Percent", "K-BB Percent",'Strikeouts','GDP')){
pl <-  ggplot(hit.plt.df, aes(x=reorder(pl.x,-pl.y), y=pl.y,fill=pl.y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(hit.plt.df$pl.x),"Hitters All-Time -",p), subtitle =paste(x,"-", z)) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=hit.plt.df,aes(x=pl.x,y=pl.y,label=pl.y),size = 4, hjust=1, colour = "black") +
scale_y_continuous(toupper(x)) +
theme(axis.title.y = element_blank()) +
theme(axis.text.y = element_text(face="bold", size = 10))+
theme(legend.position = "none") +
scale_fill_gradient(low = "#5FC3E4", high =  "#E55D87")  +
coord_flip()
pl
} else {
pl <-  ggplot(hit.plt.df, aes(x=reorder(pl.x,pl.y), y=pl.y,fill=pl.y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(hit.plt.df$pl.x),"Hitters All-Time -",p), subtitle =paste(x,"-", z))  +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=hit.plt.df,aes(x=pl.x,y=pl.y,label=pl.y),size = 4, hjust=1, colour = "black") +
scale_y_continuous(toupper(x)) +
theme(axis.title.y = element_blank()) +
theme(axis.text.y = element_text(face="bold", size = 10))+
theme(legend.position = "none") +
scale_fill_gradient(low = "#E55D87", high =  "#5FC3E4")  +
coord_flip()
pl
}
x <- 'GDP'
source('~/.active-rstudio-document')
# plotting funtion, if statistic is k percetn or k-bb percent, plot in reverse order
if(x %in% c("K Percent", "K-BB Percent",'Strikeouts','GDP')){
pl <-  ggplot(hit.plt.df, aes(x=reorder(pl.x,-pl.y), y=pl.y,fill=pl.y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(hit.plt.df$pl.x),"Hitters All-Time -",p), subtitle =paste(x,"-", z)) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=hit.plt.df,aes(x=pl.x,y=pl.y,label=pl.y),size = 4, hjust=1, colour = "black") +
scale_y_continuous(toupper(x)) +
theme(axis.title.y = element_blank()) +
theme(axis.text.y = element_text(face="bold", size = 10))+
theme(legend.position = "none") +
scale_fill_gradient(low = "#5FC3E4", high =  "#E55D87")  +
coord_flip()
pl
} else {
pl <-  ggplot(hit.plt.df, aes(x=reorder(pl.x,pl.y), y=pl.y,fill=pl.y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(hit.plt.df$pl.x),"Hitters All-Time -",p), subtitle =paste(x,"-", z))  +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=hit.plt.df,aes(x=pl.x,y=pl.y,label=pl.y),size = 4, hjust=1, colour = "black") +
scale_y_continuous(toupper(x)) +
theme(axis.title.y = element_blank()) +
theme(axis.text.y = element_text(face="bold", size = 10))+
theme(legend.position = "none") +
scale_fill_gradient(low = "#E55D87", high =  "#5FC3E4")  +
coord_flip()
pl
}
runApp('PBE_App.R')
source('~/Documents/GitHub/PBE/Codes/Season_Stats.R')
l <- "PBE"
x <- "WAR"
y <- "Homeruns"
p <- "All"
num.x <- which( colnames(c.all.hit)==x)
source('~/Documents/GitHub/PBE/Codes/All-Time_Stats.R')
l <- "PBE"
x <- "WAR"
y <- "Homeruns"
p <- "All"
num.x <- which( colnames(c.all.hit)==x)
num.y <- which( colnames(c.all.hit)==y)
if (p=='All'){
c.pl.scatter <- subset(c.all.hit,c.all.hit$league_abbr == l)
}else if (p == 'OF'){
c.pl.scatter <- subset(c.all.hit,c.all.hit$league_abbr == l & c.all.hit$Position %in% c('LF','CF','RF'))
} else{
c.pl.scatter <- subset(c.all.hit,c.all.hit$league_abbr == l & c.all.hit$Position == p)
}
if(x %in% c('Average','OBP','SLG','OPS','ISO','BABIP','K Percent','BB Percent','K-BB Percent','Strikeouts') | y %in% c('Average','OBP','SLG','OPS','ISO','BABIP','K Percent','BB Percent','K-BB Percent','Strikeouts') ){
mean_pa <- round(mean(c.pl.scatter$`Plate Apperances`),0)
c.pl.scatter <- subset(c.pl.scatter,c.pl.scatter$`Plate Apperances`>=mean_pa)
} else {
c.pl.scatter <- c.pl.scatter
}
c.pl.scatter <- c.pl.scatter[c(36,as.numeric(num.x),as.numeric(num.y))]
View(c.pl.scatter)
l <- "PBE"
x <- "WAR"
y <- "Homeruns"
p <- "All"
num.x <- which( colnames(c.all.hit)==x)
num.y <- which( colnames(c.all.hit)==y)
if (p=='All'){
c.pl.scatter <- subset(c.all.hit,c.all.hit$league_abbr == l)
}else if (p == 'OF'){
c.pl.scatter <- subset(c.all.hit,c.all.hit$league_abbr == l & c.all.hit$Position %in% c('LF','CF','RF'))
} else{
c.pl.scatter <- subset(c.all.hit,c.all.hit$league_abbr == l & c.all.hit$Position == p)
}
if(x %in% c('Average','OBP','SLG','OPS','ISO','BABIP','K Percent','BB Percent','K-BB Percent','Strikeouts') | y %in% c('Average','OBP','SLG','OPS','ISO','BABIP','K Percent','BB Percent','K-BB Percent','Strikeouts') ){
mean_pa <- round(mean(c.pl.scatter$`Plate Apperances`),0)
c.pl.scatter <- subset(c.pl.scatter,c.pl.scatter$`Plate Apperances`>=mean_pa)
} else {
c.pl.scatter <- c.pl.scatter
}
View(c.pl.scatter)
source('~/Documents/GitHub/PBE/Codes/Season_Stats.R')
l <- "PBE"
x <- "WAR"
y <- "Homeruns"
p <- "All"
num.x <- which( colnames(s.all.hit)==x)
num.y <- which( colnames(s.all.hit)==y)
if (p=='All'){
s.pl.scatter <- subset(s.all.hit,s.all.hit$league_abbr == l & s.all.hit$year == z)
}else if (p == 'OF'){
s.pl.scatter <- subset(s.all.hit,s.all.hit$league_abbr == l & s.all.hit$Position %in% c('LF','CF','RF') & s.all.hit$year == z)
} else{
s.pl.scatter <- subset(s.all.hit,s.all.hit$league_abbr == l & s.all.hit$Position == p & s.all.hit$year == z)
}
l <- "PBE"
x <- "WAR"
y <- "Homeruns"
p <- "All"
z <- 2027
num.x <- which( colnames(s.all.hit)==x)
num.y <- which( colnames(s.all.hit)==y)
if (p=='All'){
s.pl.scatter <- subset(s.all.hit,s.all.hit$league_abbr == l & s.all.hit$year == z)
}else if (p == 'OF'){
s.pl.scatter <- subset(s.all.hit,s.all.hit$league_abbr == l & s.all.hit$Position %in% c('LF','CF','RF') & s.all.hit$year == z)
} else{
s.pl.scatter <- subset(s.all.hit,s.all.hit$league_abbr == l & s.all.hit$Position == p & s.all.hit$year == z)
}
if(x %in% c('Average','OBP','SLG','OPS','ISO','BABIP','K Percent','BB Percent','K-BB Percent','Strikeouts') | y %in% c('Average','OBP','SLG','OPS','ISO','BABIP','K Percent','BB Percent','K-BB Percent','Strikeouts') ){
mean_pa <- round(mean(s.pl.scatter$`Plate Apperances`),0)
s.pl.scatter <- subset(s.pl.scatter,s.pl.scatter$`Plate Apperances`>=mean_pa)
} else {
s.pl.scatter <- s.pl.scatter
}
View(s.pl.scatter)
