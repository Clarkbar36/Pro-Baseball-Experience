# SATCMB25 - Combined SAT-Math and SAT-Verbal 25th percentils scores
# SATM25 -	SAT-Verbal 25th percentile score
# SATV25 -	SAT-Math 25th percentile score
# STEM_RSD -	STEM research/scholarship doctoral degrees
# UGCIP4PR -	Number of different 4-digit CIP code designations in which institution confers an undergraduate degree
# UGNTRFT17 -	Undergraduate new transfer-in full-time students
extra <- extra_variables %>%
filter(unitid %in% key$unitid) %>%
select(unitid, ACTCMP25, ACTFINAL, NGCIP2DR, NGCIP2PXDR, PCTCOEX, PCTLRGST, SATACTEQ25, SATCMB25, SATV25, STEM_RSD, UGCIP4PR, UGNTRFT17)
peer <- merge(peer, extra, all.x = TRUE)
Private_peer.pca <- prcomp(Private_Peer[,c(6:46)],scale. = TRUE, center = TRUE)
Private_Peer <- subset(peer,peer$control == "PRIVATE")
Private_peer.pca <- prcomp(Private_Peer[,c(6:46)],scale. = TRUE, center = TRUE)
View(Private_Peer)
Private_peer.pca <- prcomp(Private_Peer[,c(6:44)],scale. = TRUE, center = TRUE)
Private_Peer <- subset(peer,peer$control == "PRIVATE") %>% na.omit()
Private_peer.pca <- prcomp(Private_Peer[,c(6:44)],scale. = TRUE, center = TRUE)
summary(Private_peer.pca)
ggbiplot(Private_peer.pca, ellipse=TRUE, labels=Private_Peer$Inst.Name, groups=Private_Peer$Control, var.axes = FALSE, obs.scale = 1, var.scale = 1) + scale_colour_manual(values = c("forest green"))+ ggtitle("PCA of Private AAU Schools")+theme_minimal()+theme(legend.position = "bottom")
colnames(Private_Peer)
ggbiplot(Private_peer.pca, ellipse=TRUE, labels=Private_Peer$institution.name, groups=Private_Peer$control, var.axes = FALSE, obs.scale = 1, var.scale = 1) + scale_colour_manual(values = c("forest green"))+ ggtitle("PCA of Private AAU Schools")+theme_minimal()+theme(legend.position = "bottom")
Peer.pca <- peer %>% na.omit()
Peer.pca <- prcomp(peer[,c(6:44)],scale. = TRUE, center = TRUE)
summary(Peer.pca)
ggbiplot(Peer.pca, ellipse=TRUE, labels=Peer$institution.name, groups=Peer$control, var.axes = FALSE, obs.scale = 1, var.scale = 1) + scale_colour_manual(values = c("forest green","orange"))+ ggtitle("PCA of AAU Schools")+theme_minimal()+theme(legend.position = "bottom")
View(Peer.pca)
Peer.pca <- prcomp(Peer.pca[,c(6:44)],scale. = TRUE, center = TRUE)
summary(Peer.pca)
ggbiplot(Peer.pca, ellipse=TRUE, labels=Peer$institution.name, groups=Peer$control, var.axes = FALSE, obs.scale = 1, var.scale = 1) + scale_colour_manual(values = c("forest green","orange"))+ ggtitle("PCA of AAU Schools")+theme_minimal()+theme(legend.position = "bottom")
ggbiplot(Peer.pca, ellipse=TRUE, labels=Peer.pca$institution.name, groups=Peer.pca$control, var.axes = FALSE, obs.scale = 1, var.scale = 1) + scale_colour_manual(values = c("forest green","orange"))+ ggtitle("PCA of AAU Schools")+theme_minimal()+theme(legend.position = "bottom")
Peer.pca <- peer %>% na.omit()
Peer.all <- peer %>% na.omit()
Peer.pca <- prcomp(Peer.all[,c(6:44)],scale. = TRUE, center = TRUE)
summary(Peer.pca)
ggbiplot(Peer.pca, ellipse=TRUE, labels=Peer.all$institution.name, groups=Peer.all$control, var.axes = FALSE, obs.scale = 1, var.scale = 1) + scale_colour_manual(values = c("forest green","orange"))+ ggtitle("PCA of AAU Schools")+theme_minimal()+theme(legend.position = "bottom")
source('~/Box/AS&E Institutional Research/Peer Rankings/Peer.R')
View(peer)
View(peer)
Private_Peer <- subset(peer,peer$control == "PRIVATE") %>% na.omit()
View(peer)
Private_peer.pca <- prcomp(Private_Peer[,c(6:44)],scale. = TRUE, center = TRUE)
summary(Private_peer.pca)
ggbiplot(Private_peer.pca, ellipse=TRUE, labels=Private_Peer$institution.name, groups=Private_Peer$control, var.axes = FALSE, obs.scale = 1, var.scale = 1) + scale_colour_manual(values = c("forest green"))+ ggtitle("PCA of Private AAU Schools")+theme_minimal()+theme(legend.position = "bottom")
ggbiplot(Private_peer.pca, ellipse=TRUE, groups=Private_Peer$control, var.axes = FALSE, obs.scale = 1, var.scale = 1) + scale_colour_manual(values = c("forest green"))+ ggtitle("PCA of Private AAU Schools")+theme_minimal()+theme(legend.position = "bottom")
ggbiplot(Peer.pca, ellipse=TRUE, labels=Peer.all$institution.name, groups=Peer.all$control, var.axes = FALSE, obs.scale = 1, var.scale = 1) + scale_colour_manual(values = c("forest green","orange"))+ ggtitle("PCA of AAU Schools")+theme_minimal()+theme(legend.position = "bottom")
summary(Peer.pca)
library(shiny); runApp('Documents/GitHub/PBE/PBE_App.R')
library(rpart)
train
install.packages("titanic")
library(titanic)
train <- titanic_train
train$Survived
table(train$Survived)
prop.table(table(train$Survived))
aggregate(Survived ~ Child + Sex, data = train, FUN = length())
View(train)
train$Child[train$Age < 18] <- 1
View(train)
train$Child <- 0
train$Child[train$Age < 18] <- 1
View(train)
aggregate(Survived ~ Child + Sex, data = train, FUN = length)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
plot(fit)
text(fit)
test <- titanic_test
first_predict <- predict(fit, test, type = "class")
first_predict
View(test)
suppressMessages(library(tidyverse))
suppressMessages(library(dplyr))
suppressMessages(library(ggplot2))
suppressMessages(library(stringr))
suppressMessages(library(RColorBrewer))
setwd("~/Documents/GitHub/PBE/")
s.x_pl <- read.csv('Exports/players.csv',header = TRUE)
s.x_pl$full_name <- paste(s.x_pl$first_name,s.x_pl$last_name)
s.positions <- data.frame('position' = 1:10, 'position_name' = c('P','C','1B','2B','3B','SS','LF','CF','RF','DH'))
s.combined.players <- merge(s.x_pl,s.positions,by = "position", all.x = TRUE)
s.pl_name_lookup <- s.combined.players[c(2,5,99,100)]
View(s.pl_name_lookup)
pitching_games <- read.csv('Exports/players_game_pitching_stats.csv')
View(pitching_games)
x_pl <- read.csv('Exports/playercsv',header = TRUE)
x_pl$full_name <- paste(x_pl$first_name,x_pl$last_name)
positions <- data.frame('position' = 1:10, 'position_name' = c('P','C','1B','2B','3B','SS','LF','CF','RF','DH'))
combined.players <- merge(x_pl,positions,by = "position", all.x = TRUE)
pl_name_lookup <- combined.players[c(2,5,99,100)]
x_pl <- read.csv('Exports/players.csv',header = TRUE)
x_pl$full_name <- paste(x_pl$first_name,x_pl$last_name)
positions <- data.frame('position' = 1:10, 'position_name' = c('P','C','1B','2B','3B','SS','LF','CF','RF','DH'))
combined.players <- merge(x_pl,positions,by = "position", all.x = TRUE)
pl_name_lookup <- combined.players[c(2,5,99,100)]
pitching_games <- read.csv('Exports/players_game_pitching_stats.csv')
pitching_games <- merge(pitching_games, pl_name_lookup)
View(combined.players)
View(pitching_games)
pitching_games <- read.csv('Exports/players_game_pitching_stats.csv')
pitching_games <- merge(pitching_games, pl_name_lookup)
View(pitching_games)
View(pl_name_lookup)
View(pitching_games)
current_pitching <- pitching_games %>% filter(year = 2030, split_id = 1, GS = 1)
current_pitching <- pitching_games %>% filter(year == 2030, split_id == 1, GS == 1)
current_pitching <- pitching_games %>% filter(year == 2030, split_id == 1, gs == 1)
View(current_pitching)
current_pitching <- pitching_games %>% filter(year == 2030, split_id == 1, gs == 1, league_id != 1000)
View(current_pitching)
leagues <- read.csv("Exports/leagues.csv", header = TRUE)
leagues <- leagues[c(1,3)]
colnames(leagues)[colnames(leagues) == 'abbr'] <- 'league_abbr'
pitching_games <- merge(pitching_games,leagues,all.x = TRUE)
all_teams <- read.csv("Exports/teams.csv",header = TRUE)
all_teams$team_name <- paste(all_teams$name,all_teams$nickname)
team_lookup <- all_teams[c(1,3,28)]
pitching_games <- merge(pitching_games, team_lookup, all.x = TRUE)
View(pitching_games)
current_pitching <- pitching_games %>% filter(year == 2030, split_id == 1, gs == 1, league_id != 1000)
View(current_pitching)
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
mutate(ERA = 9*(er/ip))
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
mutate(ERA = round(9*(er/ip),2))
View(current_pitching)
current_pitching$ES <- sum(ip >= 6 & ERA <= 3)
current_pitching$ES <- sum(current_pitching$ip >= 6 & current_pitching$ERA <= 3)
View(current_pitching)
current_pitching$ES <- count(current_pitching$ip >= 6 & current_pitching$ERA <= 3)
current_pitching$ES <- current_pitching$ip >= 6 & current_pitching$ERA <= 3
View(current_pitching)
current_pitching$ES <- sum(current_pitching$ip >= 6 & current_pitching$ERA <= 3)
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(current_pitching$ip >= 6 & current_pitching$ERA <= 3,1,0))
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse(ip < 6 | (ERA >= 3 | ERA <= 4.50)
)
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse(ip < 6 | (ERA >= 3 | ERA <= 4.50)))
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse(ip < 6 | (ERA >= 3 | ERA <= 4.50),1,0))
View(current_pitching)
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse(ip < 6 | (ERA >= 3 | ERA <= 4.50),1,0))
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse((ERA >= 3 | ERA <= 4.50),1,0))
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse((ERA >= 3 & ERA <= 4.50),1,0))
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse(ip < 6 | (ERA >= 3 & ERA <= 4.50),1,0))
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse(ip < 6 & (ERA >= 3 & ERA <= 4.50),1,0))
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse((ERA >= 3 & ERA <= 4.50),1,0))
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse((ERA >= 3 & ERA <= 4.50),1,ifelse(ip < 6, 1,0)))
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse((ERA >= 3 & ERA <= 4.50),1,ifelse(ip < 6 & ERA <= 4.50, 0,1)))
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse((ERA >= 3 & ERA <= 4.50),1
)
View(current_pitching)
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse((ERA >= 3 & ERA <= 4.50),1,0)
)
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse(ip < 6 | (ERA >= 3 & ERA <= 4.50),1,0))
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse(ip < 6 | (ERA >= 3 & ERA <= 4.50),ifelse(ERA <= 4.50, 0,1),0))
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse(ip < 6 | (ERA >= 3 & ERA <= 4.50),1,0)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse((ERA >= 3 & ERA <= 4.50),1,0)
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse(ERA >= 3 & ERA <= 4.50,1,0)
)
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse(ERA >= 3 & ERA <= 4.50,1,ifelse(ip < 6),1,0))
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0), NS = ifelse(ERA >= 3 & ERA <= 4.50,1,ifelse(ip < 6,1,0)))
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0),PS = ERA > 4.50)
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0),PS = ifelse(ERA > 4.50,1,0))
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
select(player_id, ip, er) %>%
mutate(ERA = round(9*(er/ip),2), ES = ifelse(ip >= 6 & ERA <= 3,1,0),PS = ifelse(ERA > 4.50,1,0), NS = ifelse(ES == 0 & PS == 0, 1,0))
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
mutate(ERA = round(9*(er/ip),2),
ES = ifelse(ip >= 6 & ERA <= 3,1,0),
PS = ifelse(ERA > 4.50,1,0),
NS = ifelse(ES == 0 & PS == 0, 1,0)) %>%
group_by(player_id) %>%
mutate(Games_Started = sum(gs),ES = sum(ES), NS = sum(NS), PS = sum(PS))
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
mutate(ERA = round(9*(er/ip),2),
ES = ifelse(ip >= 6 & ERA <= 3,1,0),
PS = ifelse(ERA > 4.50,1,0),
NS = ifelse(ES == 0 & PS == 0, 1,0)) %>%
group_by(player_id) %>%
mutate(Games_Started = sum(gs),ES = sum(ES), NS = sum(NS), PS = sum(PS), volatility% = (ES+PS)/Games_Started, VPR = ES/PS)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
mutate(ERA = round(9*(er/ip),2),
ES = ifelse(ip >= 6 & ERA <= 3,1,0),
PS = ifelse(ERA > 4.50,1,0),
NS = ifelse(ES == 0 & PS == 0, 1,0)) %>%
group_by(player_id) %>%
mutate(Games_Started = sum(gs),ES = sum(ES), NS = sum(NS), PS = sum(PS), volatility_percent = (ES+PS)/Games_Started, VPR = ES/PS)
View(current_pitching)
current_pitching <- pitching_games %>%
filter(year == 2030, split_id == 1, gs == 1, league_id != 1000) %>%
mutate(ERA = round(9*(er/ip),2),
ES = ifelse(ip >= 6 & ERA <= 3,1,0),
PS = ifelse(ERA > 4.50,1,0),
NS = ifelse(ES == 0 & PS == 0, 1,0))
volatility <- current_pitching %>%
group_by(player_id) %>%
mutate(Games_Started = sum(gs),
ES = sum(ES),
NS = sum(NS),
PS = sum(PS),
volatility_percent = round((ES+PS)/Games_Started,2),
VPR = round(ES/PS,2))
volatility <- current_pitching %>%
group_by(player_id) %>%
summarise(Games_Started = sum(gs),
ES = sum(ES),
NS = sum(NS),
PS = sum(PS),
volatility_percent = round((ES+PS)/Games_Started,2),
VPR = round(ES/PS,2))
View(volatility)
View(current_pitching)
volatility <- current_pitching %>%
group_by(player_id) %>%
summarise(Games_Started = sum(gs),
IPS = round(ip/gs,2),
ES = sum(ES),
NS = sum(NS),
PS = sum(PS),
volatility_percent = round((ES+PS)/Games_Started,2),
VPR = round(ES/PS,2))
View(current_pitching)
volatility <- current_pitching %>%
group_by(player_id) %>%
summarise(Games_Started = sum(gs),
IPS = round(sum(ip)/sum(gs),2),
ES = sum(ES),
NS = sum(NS),
PS = sum(PS),
volatility_percent = round((ES+PS)/Games_Started,2),
VPR = round(ES/PS,2))
View(current_pitching)
View(current_pitching)
filter(current_pitching, player_id == 526)
filter(current_pitching, player_id == 526) %>% sum(ip)
filter(current_pitching, player_id == 526) %>% summarise(sum(ip))
49/8
View(volatility)
View(pl_name_lookup)
View(leagues)
View(x_pl)
View(combined.players)
pl_name_lookup <- combined.players %>%
select(player_id, team_id, league_id, full_name, position_name)
View(pl_name_lookup)
leagues <- read.csv("Exports/leagues.csv", header = TRUE)
View(leagues)
leagues <- read.csv("Exports/leagues.csv", header = TRUE)
leagues <- leagues %>%
select(league_id, abbr)
colnames(leagues)[colnames(leagues) == 'abbr'] <- 'league_abbr'
pl_name_lookup <- merge(pl_name_lookup,leagues,all.x = TRUE)
View(pl_name_lookup)
View(pl_name_lookup)
pl_name_lookup <- combined.players %>%
select(player_id, team_id, league_id, full_name, position_name) %>%
filter(league_id != 0)
leagues <- read.csv("Exports/leagues.csv", header = TRUE)
leagues <- leagues %>%
select(league_id, abbr)
colnames(leagues)[colnames(leagues) == 'abbr'] <- 'league_abbr'
pl_name_lookup <- merge(pl_name_lookup,leagues,all.x = TRUE)
View(pl_name_lookup)
View(all_teams)
leagues <- read.csv("Exports/leagues.csv", header = TRUE)
leagues <- leagues %>%
select(league_id, abbr) %>%
rename(league_abbr = abbr)
pl_name_lookup <- merge(pl_name_lookup,leagues,all.x = TRUE)
View(leagues)
all_teams <- read.csv("Exports/teams.csv",header = TRUE)
all_teams$team_name <- paste(all_teams$name,all_teams$nickname)
team_lookup <- all_teams %>%
select(team_id, abbr, team_name) %>%
rename(team_abbr = abbr)
pl_name_lookup <- merge(pl_name_lookup, team_lookup, all.x = TRUE)
View(pl_name_lookup)
volatility <- merge(volatility, pl_name_lookup)
View(volatility)
lapply(volatility[VPR], function(x) ifelse(is.infinite(x), 999, x))
lapply(volatility$VPR, function(x) ifelse(is.infinite(x), 999, x))
sapply(volatility$VPR, function(x) ifelse(is.infinite(x), 999, x))
volatility$VPR <- sapply(volatility$VPR, function(x) ifelse(is.infinite(x), 999, x))
source('~/Documents/GitHub/PBE/Codes/VPR.R')
source('~/Documents/GitHub/PBE/Codes/VPR.R')
View(volatility)
View(current_pitching)
View(pitching_games)
View(volatility)
View(volatility)
volatility <- volatility %>%
select(full_name, team_name, team_abbr, league_abbr, Games_Started, IPS, ES, NS, PS, volatility_percent, VPR)
View(volatility)
volatility <- volatility %>%
select(full_name, team_name, team_abbr, league_abbr, Games_Started, IPS, ES, NS, PS, volatility_percent, VPR) %>%
arrange(league_abbr, volatility_percent, VPR)
View(volatility)
volatility <- volatility %>%
select(full_name, team_name, team_abbr, league_abbr, Games_Started, IPS, ES, NS, PS, volatility_percent, VPR) %>%
arrange(league_abbr, -volatility_percent, VPR)
View(volatility)
volatility <- volatility %>%
select(full_name, team_name, team_abbr, league_abbr, Games_Started, IPS, ES, NS, PS, volatility_percent, VPR) %>%
arrange(league_abbr, -volatility_percent, -VPR)
View(volatility)
volatility <- volatility %>%
select(full_name, team_name, team_abbr, league_abbr, Games_Started, IPS, ES, NS, PS, volatility_percent, VPR) %>%
arrange(league_abbr, -VPR, -volatility_percent)
write.csv('R_Code_Exports/VPR.csv', row.names = FALSE)
write.csv(volatility, 'R_Code_Exports/VPR.csv', row.names = FALSE)
positions <- data.frame('position' = 1:10, 'position name' = c('P','C','1B','2B','3B','SS','LF','CF','RF','DH'))
View(positions)
leagues <- leagues %>%
select(league_id, abbr) %>%
rename(`league abbr` = abbr)
leagues <- read.csv("Exports/leagues.csv", header = TRUE)
leagues <- leagues %>%
select(league_id, abbr) %>%
rename(`league abbr` = abbr)
View(leagues)
positions <- data.frame('position' = 1:10, `'position_name'`Position Name`` = c('P','C','1B','2B','3B','SS','LF','CF','RF','DH'))
positions <- data.frame('position' = 1:10, `Position Name` = c('P','C','1B','2B','3B','SS','LF','CF','RF','DH'))
View(positions)
volatility <- volatility %>%
select(full_name, team_name, team_abbr, league_abbr, Games_Started, IPS, ES, NS, PS, volatility_percent, VPR) %>%
arrange(league_abbr, -VPR, -volatility_percent) %.%
rename(Name = full_name, Team = team_name, League = league_abbr, `Games Started` = Games_Started)
volatility <- volatility %>%
select(full_name, team_name, team_abbr, league_abbr, Games_Started, IPS, ES, NS, PS, volatility_percent, VPR) %>%
arrange(league_abbr, -VPR, -volatility_percent) %>%
rename(Name = full_name, Team = team_name, League = league_abbr, `Games Started` = Games_Started)
View(volatility)
volatility <- volatility %>%
select(full_name, team_name, team_abbr, league_abbr, Games_Started, IPS, ES, NS, PS, volatility_percent, VPR) %>%
arrange(league_abbr, -VPR, -volatility_percent) %>%
rename(Name = full_name, Team = team_name, `Team Abbr` = team_abbr, League = league_abbr, `Games Started` = Games_Started, `Innings per Start` = IPS, `Excellent Starts` = ES, `Neutral Starts` = NS, `Poor Starts` = PS, `Volatility %` = volatility_percent)
volatility <- current_pitching %>%
group_by(player_id) %>%
summarise(Games_Started = sum(gs),
IPS = round(sum(ip)/sum(gs),2),
ES = sum(ES),
NS = sum(NS),
PS = sum(PS),
volatility_percent = round((ES+PS)/Games_Started,2),
VPR = round(ES/PS,2))
volatility$VPR <- sapply(volatility$VPR, function(x) ifelse(is.infinite(x), 999, x))
volatility <- merge(volatility, pl_name_lookup)
volatility <- volatility %>%
select(full_name, team_name, team_abbr, league_abbr, Games_Started, IPS, ES, NS, PS, volatility_percent, VPR) %>%
arrange(league_abbr, -VPR, -volatility_percent) %>%
rename(Name = full_name, Team = team_name, `Team Abbr` = team_abbr, League = league_abbr, `Games Started` = Games_Started, `Innings per Start` = IPS, `Excellent Starts` = ES, `Neutral Starts` = NS, `Poor Starts` = PS, `Volatility %` = volatility_percent)
View(volatility)
write.csv(volatility, 'R_Code_Exports/VPR.csv', row.names = FALSE)
pitch_war <- read.csv('Exports/players_career_pitching_stats.csv')
View(pitching_games)
View(pitch_war)
pitch_war <- pitch_war %>%
filter(year == 2030, split_id == 1) %>%
select(player_id, war)
View(pitch_war)
volatility <- bind_cols(volatility, pl_name_lookup, pitch_war)
volatility <- merge(volatility, pitch_war)
volatility <- current_pitching %>%
group_by(player_id) %>%
summarise(Games_Started = sum(gs),
IPS = round(sum(ip)/sum(gs),2),
ES = sum(ES),
NS = sum(NS),
PS = sum(PS),
volatility_percent = round((ES+PS)/Games_Started,2),
VPR = round(ES/PS,2))
volatility$VPR <- sapply(volatility$VPR, function(x) ifelse(is.infinite(x), 999, x))
volatility <- merge(volatility, pl_name_lookup)
volatility <- merge(volatility, pitch_war, all.x = TRUE)
View(volatility)
volatility <- volatility %>%
select(full_name, team_name, team_abbr, league_abbr, Games_Started, IPS, ES, NS, PS, VPR, volatility_percent, war) %>%
arrange(league_abbr, -VPR, -volatility_percent) %>%
rename(Name = full_name, Team = team_name, `Team Abbr` = team_abbr, League = league_abbr, `Games Started` = Games_Started, `Innings per Start` = IPS, `Excellent Starts` = ES, `Neutral Starts` = NS, `Poor Starts` = PS, `Volatility %` = volatility_percent, WAR = war)
View(volatility)
write.csv(volatility, 'R_Code_Exports/VPR.csv', row.names = FALSE)
tm_volatility <- current_pitching %>%
group_by(team_id) %>%
summarise(Games_Started = sum(gs),
IPS = round(sum(ip)/sum(gs),2),
ES = sum(ES),
NS = sum(NS),
PS = sum(PS),
volatility_percent = round((ES+PS)/Games_Started,2),
VPR = round(ES/PS,2))
View(tm_volatility)
tm_volatility <- merge(tm_volatility,team_lookup)
View(tm_volatility)
tm_volatility <- current_pitching %>%
group_by(team_id, league_id) %>%
summarise(Games_Started = sum(gs),
IPS = round(sum(ip)/sum(gs),2),
ES = sum(ES),
NS = sum(NS),
PS = sum(PS),
volatility_percent = round((ES+PS)/Games_Started,2),
VPR = round(ES/PS,2))
tm_volatility <- merge(tm_volatility,team_lookup)
tm_volatility <- merge(tm_volatility,leagues)
View(tm_volatility)
tm_volatility <- tm_volatility %>%
select(team_name, team_abbr, league_abbr, Games_Started, IPS, ES, NS, PS, VPR, volatility_percent) %>%
arrange(league_abbr, -VPR, -volatility_percent) %>%
rename(Team = team_name, `Team Abbr` = team_abbr, League = league_abbr, `Games Started` = Games_Started, `Innings per Start` = IPS, `Excellent Starts` = ES, `Neutral Starts` = NS, `Poor Starts` = PS, `Volatility %` = volatility_percent)
View(tm_volatility)
tm_volatility <- tm_volatility %>%
select(team_name, team_abbr, `league abbr`, Games_Started, IPS, ES, NS, PS, VPR, volatility_percent) %>%
arrange(league_abbr, -VPR, -volatility_percent) %>%
rename(Team = team_name, `Team Abbr` = team_abbr, League = `league abbr`, `Games Started` = Games_Started, `Innings per Start` = IPS, `Excellent Starts` = ES, `Neutral Starts` = NS, `Poor Starts` = PS, `Volatility %` = volatility_percent)
tm_volatility <- tm_volatility %>%
select(team_name, team_abbr, `league abbr`, Games_Started, IPS, ES, NS, PS, VPR, volatility_percent) %>%
arrange(`league abbr`, -VPR, -volatility_percent) %>%
rename(Team = team_name, `Team Abbr` = team_abbr, League = `league abbr`, `Games Started` = Games_Started, `Innings per Start` = IPS, `Excellent Starts` = ES, `Neutral Starts` = NS, `Poor Starts` = PS, `Volatility %` = volatility_percent)
View(tm_volatility)
write.csv(tm_volatility, 'R_Code_Exports/tm_VPR.csv', row.names = FALSE)
