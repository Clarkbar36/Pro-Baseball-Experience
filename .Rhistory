library(titanic)
train <- titanic_train
train$Survived
table(train$Survived)
prop.table(table(train$Survived))
aggregate(Survived ~ Child + Sex, data = train, FUN = length())
View(train)
train$Child[train$Age < 18] <- 1
View(train)
train$Child <- 0
train$Child[train$Age < 18] <- 1
View(train)
aggregate(Survived ~ Child + Sex, data = train, FUN = length)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
plot(fit)
text(fit)
test <- titanic_test
first_predict <- predict(fit, test, type = "class")
first_predict
View(test)
debugSource('~/Box/Alissa Private Folder/Alex/Total Opportunities/TTL_OPP_Scrape.R')
# week
w <- 6
setwd("~/Box/AS&E Institutional Research/Alex Reports/Ad Hocs/Common Exam")
library(tidyverse)
setwd("~/Box/AS&E Institutional Research/Alex Reports/Ad Hocs/Common Exam")
urid <- read.csv("URID.csv")
View(urid)
urid <- urid %>% mutate(ID = paste(URID, Year.Term.ID, sep = ""))
View(urid)
urid <- urid %>% mutate(ID = paste(URID, Year.Term.ID, sep = "")) %>% group_by(ID) %>% summarise(Total = count(n))
urid <- urid %>% mutate(ID = paste(URID, Year.Term.ID, sep = "")) %>% group_by(ID) %>% summarise(Total = n(ID))
urid <- urid %>% mutate(ID = paste(URID, Year.Term.ID, sep = "")) %>% group_by(ID) %>% summarise(Total = n())
View(urid)
urid <- read.csv("URID.csv")
urid <- urid %>% mutate(ID = paste(URID, Year.Term.ID, sep = ""))
student_load <- urid %>% group_by(ID) %>% summarise(Total = n())
View(student_load)
View(urid)
View(student_load)
student_load <- urid %>% group_by(ID) %>% summarise(Class_in_Semester = n())
View(student_load)
View(student_load)
student_load$id <- student_load$Class_in_Semester
View(student_load)
urid <- read.csv("URID.csv")
urid <- urid %>% mutate(ID = paste(URID, Year.Term.ID, sep = ""))
student_load <- urid %>% group_by(ID) %>% summarise(Classes_in_Semester = n())
student_load$dum <- student_load$Class_in_Semester
student_load$dum <- student_load$Classes_in_Semester
View(student_load)
test <-  dcast(data = student_load,formula = ID~Classes_in_Semester,fun.aggregate = count,value.var = "dum")
library(data.table)
test <-  dcast(data = student_load,formula = ID~Classes_in_Semester,fun.aggregate = count,value.var = "dum")
test <- student_load %>% group_by(Classes_in_Semester) %>% summarise(testing = n())
View(test)
View(student_load)
View(urid)
student_load <- urid %>% group_by(ID, Year.Term.ID) %>% summarise(Classes_in_Semester = n())
View(student_load)
test <- student_load %>% group_by(Classes_in_Semester, Year.Term.ID) %>% summarise(count = n())
View(test)
totals <- student_load %>% group_by(Year.Term.ID) %>% summarise(term_total = n())
View(totals)
final_student_load <- merge(student_load, totals)
View(final_student_load)
test <- final_student_load %>% group_by(Classes_in_Semester, Year.Term.ID) %>% summarise(count = n(), percent = round(count/term_total))
View(final_student_load)
test <- final_student_load %>% group_by(Classes_in_Semester, Year.Term.ID) %>% summarise(count = n(), percent = round(count/term_total,2))
test <- final_student_load %>% group_by(Classes_in_Semester, Year.Term.ID) %>% summarise(count = n())
View(test)
test <- merge(test, totals)
test <- test %>% mutate(percentage = round(count/term_total,2))
View(test)
test <- test %>% mutate(percentage = round(count/term_total,3))
View(test)
test <- test %>% mutate(percentage = round(count/term_total,4))
View(test)
test <- test %>% mutate(percentage = round(count/term_total,4)) %>% select(-term_total)
View(test)
View(test)
test <- test %>% mutate(percentage = round(count/term_total,4)) %>% select(-term_total) %>% arrange(Year.Term.ID, Classes_in_Semester)
test <- merge(test, totals)
test <- test %>% mutate(percentage = round(count/term_total,4)) %>% select(-term_total) %>% arrange(Year.Term.ID, Classes_in_Semester)
View(test)
source('~/.active-rstudio-document')
write.csv(URID_Enrollment,"URID_Enrollment.csv", row.names = FALSE)
source('~/.active-rstudio-document')
View(student_load)
View(urid)
urid <- merge(urid, student_load)
View(urid)
urid <- urid %>% select(-ID)
View(urid)
View(urid)
classes <- urid %>% group_by(Year.Term.ID, Parent.Subj.Course.No, Classes_in_Semester) %>% summarise(Student_Counts = n())
View(classes)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
urid_load <- read.csv("URID.csv")
View(urid_load)
length(subset(urid_load$Year.Term.ID == 20171 & urid_load$Parent.Subj.Course.No == "BIO110"))
length(filter(urid_load$Year.Term.ID == 20171 & urid_load$Parent.Subj.Course.No == "BIO110"))
test <- subset(urid_load$Year.Term.ID == 20171 & urid_load$Parent.Subj.Course.No == "BIO110")
length(subset(urid_load, urid_load$Year.Term.ID == 20171 & urid_load$Parent.Subj.Course.No == "BIO110"))
View(urid_load)
subset(urid_load, urid_load$Year.Term.ID == 20171 & urid_load$Parent.Subj.Course.No == "BIO110")
tst <- subset(urid_load, urid_load$Year.Term.ID == 20171 & urid_load$Parent.Subj.Course.No == "BIO110")
View(classes)
View(tst)
tst <- subset(urid, urid$Year.Term.ID == 20171 & urid$Parent.Subj.Course.No == "BIO110" & urid$Classes_in_Semester == 2)
View(tst)
tst <- subset(urid, urid$Year.Term.ID == 20171 & urid$Parent.Subj.Course.No == "BIO110")
tst <- subset(urid, urid$Year.Term.ID == 20171)
View(totals)
totals <- urid_load %>%
group_by(Year.Term.ID) %>%
summarise(term_total = n())
View(totals)
totals <- urid %>%
group_by(Year.Term.ID) %>%
summarise(term_total = n())
View(totals)
View(student_load)
View(student_load)
View(URID_Enrollment)
source('~/.active-rstudio-document')
test <- merge(urid, student_load)
View(urid)
View(student_load)
urid$ID <- paste(urid$URID, urid$Year.Term.ID)
View(urid)
urid$ID <- paste(urid$URID, urid$Year.Term.ID, sep = "")
test <- merge(urid, student_load)
View(test)
URID_Enrollment <- test %>%
group_by(Classes_in_Semester, Year.Term.ID) %>%
summarise(Student_Count = n())
View(URID_Enrollment)
URID_Enrollment <- merge(URID_Enrollment, totals)
URID_Enrollment <- URID_Enrollment %>%
mutate(percentage = round(Student_Count/term_total,4)) %>%
select(-term_total) %>%
arrange(Year.Term.ID, Classes_in_Semester)
write.csv(URID_Enrollment,"URID_Enrollment.csv", row.names = FALSE)
write.csv(URID_Enrollment,"URID_Enrollment.csv", row.names = FALSE)
View(urid)
totals <- student_load %>%
group_by(Year.Term.ID) %>%
summarise(term_total = n())
View(totals)
View(student_load)
test1 <- subset(student_load, student_load$Year.Term.ID == 20171)
View(test1)
# urid$ID <- paste(urid$URID, urid$Year.Term.ID, sep = "")
# test <- merge(urid, student_load)
#
URID_Enrollment <- student_load %>%
group_by(Classes_in_Semester, Year.Term.ID) %>%
summarise(Student_Count = n())
URID_Enrollment <- merge(URID_Enrollment, totals)
View(URID_Enrollment)
URID_Enrollment <- URID_Enrollment %>%
mutate(percentage = round(Student_Count/term_total,4)) %>%
select(-term_total) %>%
arrange(Year.Term.ID, Classes_in_Semester)
View(URID_Enrollment)
View(URID_Enrollment)
classes <- student_load %>% group_by(Year.Term.ID, Parent.Subj.Course.No, Classes_in_Semester) %>% summarise(Student_Counts = n())
library(tidyverse)
library(data.table)
setwd("~/Box/AS&E Institutional Research/Alex Reports/Ad Hocs/Common Exam")
urid_load <- read.csv("URID.csv")
urid <- urid_load %>%
mutate(ID = paste(URID, Year.Term.ID, sep = ""))
student_load <- urid %>%
group_by(ID, Year.Term.ID) %>%
summarise(Classes_in_Semester = n())
totals <- student_load %>%
group_by(Year.Term.ID) %>%
summarise(term_total = n())
URID_Enrollment <- student_load %>%
group_by(Classes_in_Semester, Year.Term.ID) %>%
summarise(Unique_Student_Count = n())
URID_Enrollment <- merge(URID_Enrollment, totals)
URID_Enrollment <- URID_Enrollment %>%
mutate(percentage = round(Unique_Student_Count/term_total,4)) %>%
select(-term_total) %>%
arrange(Year.Term.ID, Classes_in_Semester)
write.csv(URID_Enrollment,"URID_Enrollment.csv", row.names = FALSE)
View(urid)
classes <- urid %>% group_by(Year.Term.ID, Parent.Subj.Course.No, Classes_in_Semester) %>% summarise(Student_Counts = n())
View(urid)
View(urid_load)
View(urid)
View(urid)
View(student_load)
View(urid)
classes_load <- merge(urid,student_load)
View(classes_load)
classes <- classes_load %>% group_by(Year.Term.ID, Parent.Subj.Course.No, Classes_in_Semester) %>% summarise(Student_Counts = n())
View(classes)
View(classes)
View(classes)
write.csv(classes, "Classes_Enrollment_Detail.csv", row.names = FALSE)
View(classes)
View(urid)
View(student_load)
View(URID_Enrollment)
View(classes_load)
test <- subset(classes_load, classes_load$Year.Term.ID == 20171 & classes_load$Parent.Subj.Course.No == "BIO112" & classes_load$Classes_in_Semester == 2)
View(test)
test <- subset(classes_load, classes_load$Year.Term.ID == 20171 & classes_load$Parent.Subj.Course.No == "BIO112")
View(classes_load)
View(classes_load)
class_totals <- classes_load %>%
group_by(Year.Term.ID, Parent.Subj.Course.No) %>%
summarise(Total_Enrollment = n())
View(class_totals)
class_totals <- classes_load %>%
group_by(Year.Term.ID, Parent.Subj.Course.No) %>%
summarise(Total_Enrollment = n()) %>%
mutate(Class_ID = paste(Year.Term.ID, Parent.Subj.Course.No, sep = ""))
View(class_totals)
classes <- classes_load %>%
group_by(Year.Term.ID, Parent.Subj.Course.No, Classes_in_Semester) %>%
summarise(Student_Counts = n()) %>%
mutate(Class_ID = paste(Year.Term.ID, Parent.Subj.Course.No, sep = ""))
View(classes)
classes <- merge(classes, class_totals)
View(classes)
classes <- classes %>%
mutate(percentage = round(Student_Counts/Total_Enrollment,4)) %>%
select(-Class_ID)
View(classes)
classes_load <- merge(urid,student_load)
class_totals <- classes_load %>%
group_by(Year.Term.ID, Parent.Subj.Course.No) %>%
summarise(Total_Enrollment = n()) %>%
mutate(Class_ID = paste(Year.Term.ID, Parent.Subj.Course.No, sep = ""))
classes <- classes_load %>%
group_by(Year.Term.ID, Parent.Subj.Course.No, Classes_in_Semester) %>%
summarise(Student_Counts = n()) %>%
mutate(Class_ID = paste(Year.Term.ID, Parent.Subj.Course.No, sep = ""))
classes <- merge(classes, class_totals)
classes <- classes %>%
mutate(percentage = round(Student_Counts/Total_Enrollment,4)) %>%
select(-Class_ID, - Total_Enrollment)
View(classes)
write.csv(classes, "Classes_Enrollment_Detail.csv", row.names = FALSE)
write.csv(classes, "Classes_Enrollment_Detail.csv", row.names = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(dplyr))
suppressMessages(library(ggplot2))
suppressMessages(library(stringr))
suppressMessages(library(RColorBrewer))
setwd("~/Documents/GitHub/PBE/")
load("R_Code_Exports/coords.RData")
x_pl <- read.csv('Exports/players.csv',header = TRUE)
x_pl$full_name <- paste(x_pl$first_name,x_pl$last_name)
positions <- data.frame('position' = 1:10, 'position_name' = c('P','C','1B','2B','3B','SS','LF','CF','RF','DH'))
combined.players <- merge(x_pl,positions,by = "position", all.x = TRUE)
pl_name_lookup <- combined.players %>%
select(player_id, team_id, league_id, full_name, position_name) %>%
filter(league_id != 0)
leagues <- read.csv("Exports/leagues.csv", header = TRUE)
leagues <- leagues %>%
select(league_id, abbr) %>%
rename(league_abbr = abbr)
pl_name_lookup <- merge(pl_name_lookup,leagues,all.x = TRUE)
all_teams <- read.csv("Exports/teams.csv",header = TRUE)
all_teams$team_name <- paste(all_teams$name,all_teams$nickname)
team_lookup <- all_teams %>%
select(team_id, abbr, team_name) %>%
rename(team_abbr = abbr)
pl_name_lookup <- merge(pl_name_lookup, team_lookup, all.x = TRUE)
names <- colnames(pl_name_lookup)
hitter_lookup <-  pl_name_lookup
colnames(hitter_lookup) <- paste("Hitter", names, sep = "_")
pitcher_lookup <-  pl_name_lookup
colnames(pitcher_lookup) <- paste("Pitcher", names, sep = "_")
pitcher_lookup <- pitcher_lookup %>% select(-Pitcher_position_name)
at_bats <- read.csv("Exports/players_at_bat_batting_stats.csv")
at_bats <- at_bats %>% rename(Hitter_player_id = player_id, Hitter_team_id = team_id, Pitcher_player_id = opponent_player_id)
at_bats <- merge(at_bats, hitter_lookup, all.x = TRUE)
at_bats <- merge(at_bats, pitcher_lookup, all.x = TRUE)
results <- read.csv("results.csv")
at_bats <- merge(at_bats, results, all.x = TRUE)
at_bats <- at_bats %>% drop_na()
at_bats <- at_bats %>% mutate(RISP = ifelse(base2 == 1 | base3 == 1, 1,0), at_bat = 1)
at_bats$RISP <- as.integer(at_bats$RISP)
at_bats$at_bat <- as.integer(at_bats$at_bat)
games <- read.csv('Exports/games.csv', header = TRUE, sep = ',')
games <- subset(games,games$played == 1 & games$game_type == 0 & games$league_id != 1000)
games <- games %>% select(game_id) %>% distinct()
at_bats <- at_bats %>% filter(game_id %in% games$game_id)
View(at_bats)
hitter_names <- at_bats %>%
select(Hitter_full_name) %>%
distinct() %>%
arrange(Hitter_full_name)
suppressMessages(library(tidyverse))
suppressMessages(library(dplyr))
suppressMessages(library(ggplot2))
suppressMessages(library(stringr))
suppressMessages(library(RColorBrewer))
suppressMessages(library(Hmisc))
#setwd("~/Documents/GitHub/PBE/")
tm <- read.csv("Exports/teams.csv")
tm$`Team Name` <- paste(tm$name,tm$nickname)
tm <- tm[c(1,3,8,28)]
colnames(tm)[colnames(tm) == 'abbr'] <- 'Team Abbr'
ds.color <- read_excel("Misc/Colors.xlsx")
ds.color <- ds.color[c(1,3)]
lg <- read.csv("Exports/leagues.csv")
lg <- lg[c(1,3)]
colnames(lg)[colnames(lg) == 'abbr'] <- 'League'
stdp <- read.csv("Exports/team_record.csv")
stdp <- stdp[c(1,5,6)]
stdp <- subset(stdp,stdp$team_id %nin% c(7,8,12,13,14,15,22,23))
colnames(stdp)[colnames(stdp) == 'pos'] <- 'All - Division Standing'
lkup <- merge(tm,lg, all.x = TRUE)
lkup <- merge(lkup,ds.color)
lkup <- merge(lkup, stdp)
lkup <- lkup %>%
group_by(league_id) %>%
mutate(`All - League Standing` = round(rank(-pct),0)) %>%
ungroup
lkup$pct <- NULL
tm_pitch <- read.csv("Exports/team_pitching_stats.csv")
tm_pitch <- subset(tm_pitch, tm_pitch$split_id == 1)
tm_pitch$Walks <- tm_pitch$bb + tm_pitch$iw + tm_pitch$hp
tm_pitch <- tm_pitch[-c(2,4:6,13,19,20,21,25:29,31:37,44:45,56,58:63,65,66)]
{
colnames(tm_pitch)[colnames(tm_pitch) =='ip'] <- 'Pitching - Innings Pitched'
colnames(tm_pitch)[colnames(tm_pitch) =='bf'] <- 'Pitching - Batters Faced'
colnames(tm_pitch)[colnames(tm_pitch) =='tb'] <- 'Pitching - Total Bases'
colnames(tm_pitch)[colnames(tm_pitch) =='ha'] <- 'Pitching - Hits Allowed'
colnames(tm_pitch)[colnames(tm_pitch) =='k'] <- 'Pitching - Strikeouts'
colnames(tm_pitch)[colnames(tm_pitch) =='rs'] <- 'Pitching - Run Support'
colnames(tm_pitch)[colnames(tm_pitch) =='r'] <- 'Pitching - Runs'
colnames(tm_pitch)[colnames(tm_pitch) =='er'] <- 'Pitching - Earned Runs'
colnames(tm_pitch)[colnames(tm_pitch) =='gb'] <- 'Pitching - Ground Balls'
colnames(tm_pitch)[colnames(tm_pitch) =='fb'] <- 'Pitching - Fly Balls'
colnames(tm_pitch)[colnames(tm_pitch) =='pi'] <- 'Pitching - Production Index'
colnames(tm_pitch)[colnames(tm_pitch) =='w'] <- 'Pitching - Wins'
colnames(tm_pitch)[colnames(tm_pitch) =='l'] <- 'Pitching - Loss'
colnames(tm_pitch)[colnames(tm_pitch) =='s'] <- 'Pitching - Saves'
colnames(tm_pitch)[colnames(tm_pitch) =='hra'] <- 'Pitching - Homeruns Allowed'
colnames(tm_pitch)[colnames(tm_pitch) =='qs'] <- 'Pitching - Qualty Starts'
colnames(tm_pitch)[colnames(tm_pitch) =='svo'] <- 'Pitching - Save Opportunities'
colnames(tm_pitch)[colnames(tm_pitch) =='bs'] <- 'Pitching - Blown Saves'
colnames(tm_pitch)[colnames(tm_pitch) =='ra'] <- 'Pitching - Run Average'
colnames(tm_pitch)[colnames(tm_pitch) =='cg'] <- 'Pitching - Complete Game'
colnames(tm_pitch)[colnames(tm_pitch) =='sho'] <- 'Pitching - Shutout'
colnames(tm_pitch)[colnames(tm_pitch) =='hld'] <- 'Pitching - Holds'
colnames(tm_pitch)[colnames(tm_pitch) =='r9'] <- 'Pitching - Runs per 9'
colnames(tm_pitch)[colnames(tm_pitch) =='avg'] <- 'Pitching - Opponent Average'
colnames(tm_pitch)[colnames(tm_pitch) =='obp'] <- 'Pitching - Opponent OBP'
colnames(tm_pitch)[colnames(tm_pitch) =='slg'] <- 'Pitching - Opponent SLG'
colnames(tm_pitch)[colnames(tm_pitch) =='ops'] <- 'Pitching - Opponent OPS'
colnames(tm_pitch)[colnames(tm_pitch) =='h9'] <- 'Pitching - Hits per 9'
colnames(tm_pitch)[colnames(tm_pitch) =='k9'] <- 'Pitching - Ks per 9'
colnames(tm_pitch)[colnames(tm_pitch) =='hr9'] <- 'Pitching - Homerun per 9'
colnames(tm_pitch)[colnames(tm_pitch) =='bb9'] <- 'Pitching - Walks per 9'
colnames(tm_pitch)[colnames(tm_pitch) =='fip'] <- 'Pitching - FIP'
colnames(tm_pitch)[colnames(tm_pitch) =='era'] <- 'Pitching - ERA'
colnames(tm_pitch)[colnames(tm_pitch) =='whip'] <- 'Pitching - WHIP'
colnames(tm_pitch)[colnames(tm_pitch) =='gbfbp'] <- 'Pitching - Groundball-Flyball Percent'
colnames(tm_pitch)[colnames(tm_pitch) =='kbb'] <- 'Pitching - KBB'
colnames(tm_pitch)[colnames(tm_pitch) =='babip'] <- 'Pitching - BABIP'
colnames(tm_pitch)[colnames(tm_pitch) =='Walks'] <- 'Pitching - Walks'
}
tm_field <- read.csv("Exports/team_fielding_stats_stats.csv")
tm_field <- subset(tm_field, tm_field$league_id >0)
tm_field <- tm_field[-c(2,4:8,15:20,23,24)]
{
colnames(tm_field)[colnames(tm_field) =='tc'] <- 'Fielding - Total Chances'
colnames(tm_field)[colnames(tm_field) =='a'] <- 'Fielding - Assists'
colnames(tm_field)[colnames(tm_field) =='po'] <- 'Fielding - Put-Outs'
colnames(tm_field)[colnames(tm_field) =='e'] <- 'Fielding - Errors'
colnames(tm_field)[colnames(tm_field) =='dp'] <- 'Fielding - Double Plays'
colnames(tm_field)[colnames(tm_field) =='tp'] <- 'Fielding - Triple Plays'
colnames(tm_field)[colnames(tm_field) =='pct'] <- 'Fielding - Put-Out Pct'
colnames(tm_field)[colnames(tm_field) =='range'] <- 'Fielding - Range'
}
tm_bat <- read.csv("Exports/team_batting_stats.csv")
tm_bat <- subset(tm_bat, tm_bat$league_id %in% c(100,101))
tm_bat$batter.walks <- tm_bat$bb + tm_bat$ibb + tm_bat$hp
tm_bat <- tm_bat[-c(2,4,5,10,11,19:24,26,27,29,36,38,39)]
{
colnames(tm_bat)[colnames(tm_bat) =='pa'] <- 'Batting - Plate Apperances'
colnames(tm_bat)[colnames(tm_bat) =='ab'] <- 'Batting - At-Bats'
colnames(tm_bat)[colnames(tm_bat) =='h'] <- 'Batting - Hits'
colnames(tm_bat)[colnames(tm_bat) =='k'] <- 'Batting - Strikeouts'
colnames(tm_bat)[colnames(tm_bat) =='d'] <- 'Batting - Doubles'
colnames(tm_bat)[colnames(tm_bat) =='t'] <- 'Batting - Triples'
colnames(tm_bat)[colnames(tm_bat) =='hr'] <- 'Batting - Homeruns'
colnames(tm_bat)[colnames(tm_bat) =='sb'] <- 'Batting - Stolen Bases'
colnames(tm_bat)[colnames(tm_bat) =='cs'] <- 'Batting - Caught Stealing'
colnames(tm_bat)[colnames(tm_bat) =='rbi'] <- 'Batting - RBIs'
colnames(tm_bat)[colnames(tm_bat) =='r'] <- 'Batting - Runs'
colnames(tm_bat)[colnames(tm_bat) =='gdp'] <- 'Batting - Grounded in Double Play'
colnames(tm_bat)[colnames(tm_bat) =='ebh'] <- 'Batting - Extra Base Hits'
colnames(tm_bat)[colnames(tm_bat) =='avg'] <- 'Batting - Average'
colnames(tm_bat)[colnames(tm_bat) =='obp'] <- 'Batting - OBP'
colnames(tm_bat)[colnames(tm_bat) =='slg'] <- 'Batting - SLG'
colnames(tm_bat)[colnames(tm_bat) =='rc'] <- 'Batting - Runs Created'
colnames(tm_bat)[colnames(tm_bat) =='rc27'] <- 'Batting - RC27'
colnames(tm_bat)[colnames(tm_bat) =='iso'] <- 'Batting - ISO'
colnames(tm_bat)[colnames(tm_bat) =='ops'] <- 'Batting - OPS'
colnames(tm_bat)[colnames(tm_bat) =='batter.walks'] <- 'Batting - Walks'
}
all.stats <- merge(tm_bat,tm_pitch)
all.stats <- merge(all.stats,tm_field)
all.stats <- merge(all.stats,lkup,all.x = TRUE)
cnames <- colnames(all.stats[c(3:69,73:74)])
cnames <- sort(cnames)
gms <- read.csv("Exports/games.csv")
gms <- gms %>% filter(played == 1)
gms <- max(as.Date(gms$date))
typeof(cnames)
hitter_names <- at_bats %>%
select(Hitter_full_name) %>%
distinct() %>%
arrange(Hitter_full_name) %>%
as.character()
hitter_names <- at_bats$Hitter_full_name
hitter_names <- at_bats$Hitter_full_name %>%
distinct() %>%
arrange(Hitter_full_name)
hitter_names <- at_bats %>%
select(Hitter_full_name) %>%
distinct() %>%
## Start app development here
hitter <- "Speedy Boi"
hitter_names <- at_bats %>%
select(Hitter_full_name) %>%
distinct()
hitter_names <- hitter_names$Hitter_full_name
hitter_names <- sort(hitter_names)
pitcher_names <- at_bats %>%
select(Pitcher_full_name) %>%
distinct()
pitcher_names <- pitcher_names$Pitcher_full_name
pitcher_names <- sort(pitcher_names)
shiny::runApp('Codes/HvP')
runApp('Codes/HvP')
runApp('Codes/HvP')
runApp('Codes/HvP')
runApp('Codes/HvP')
runApp('Codes/HvP')
runApp('Codes/HvP')
runApp('Codes/HvP')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
plt
runApp('Codes/HvP')
runApp('Codes/HvP')
runApp('Codes/HvP')
runApp('Codes/HvP')
View(plot_hits)
View(pva_ab_filtered)
runApp('Codes/HvP')
runApp()
runApp('Codes/HvP')
runApp('Codes/HvP')
runApp('Codes/HvP')
source('~/Documents/GitHub/PBE/Codes/Coords.R')
source('~/Documents/GitHub/PBE/Codes/Coords.R')
load("R_Code_Exports/coords.RData")
runApp('Codes/HvP')
source('~/Documents/GitHub/PBE/Codes/HittervsPitcher.R')
pv_ab_filtered <- at_bats %>% filter(Hitter_full_name == hitter & Pitcher_full_name == pitcher) %>%
group_by(Hitter_full_name, Hitter_position_name, Hitter_league_abbr, Hitter_team_abbr, Hitter_team_name,
Pitcher_full_name, Pitcher_league_abbr, Pitcher_team_abbr, Pitcher_team_name) %>%
summarise(ABs = sum(at_bat), Hits = sum(hit), Singles = sum(sngl), Doubles = sum(dbl), Triples = sum(trpl),
Homeruns = sum(hr), Walks = sum(bb), Stolen_Bases = sum(sb), RBIs = sum(rbi), Extra_Base_Hits = sum(ebh),
Strikeouts = sum(k), Sacrifice_Fly = sum(sac), Batting_Average = round(Hits/ABs,3),
On_Base_Percentage = round((Hits+Walks)/(ABs+Walks+Sacrifice_Fly),3), Groundouts = sum(go), Flyouts = sum(fo))
pv_player_singles <- sample_n(singles, pv_ab_filtered$Singles[1])
pv_player_doubles <- sample_n(doubles, pv_ab_filtered$Doubles[1])
pv_player_triples <- sample_n(triples, pv_ab_filtered$Triples[1])
pv_player_homeruns <- sample_n(homeruns,pv_ab_filtered$Homeruns[1])
pv_player_flyouts <- sample_n(flyouts,pv_ab_filtered$Flyouts[1])
pv_player_groundouts <- sample_n(groundouts,pv_ab_filtered$Groundouts[1])
plot_hits <- bind_rows(pv_player_homeruns,pv_player_singles, pv_player_doubles, pv_player_triples,
pv_player_flyouts, pv_player_groundouts)
View(plot_hits)
pv_ab_filtered <- at_bats %>% filter(Hitter_full_name == hitter) %>%
group_by(Hitter_full_name, Hitter_position_name, Hitter_league_abbr, Hitter_team_abbr, Hitter_team_name) %>%
summarise(ABs = sum(at_bat), Hits = sum(hit), Singles = sum(sngl), Doubles = sum(dbl), Triples = sum(trpl),
Homeruns = sum(hr), Walks = sum(bb), Stolen_Bases = sum(sb), RBIs = sum(rbi), Extra_Base_Hits = sum(ebh),
Strikeouts = sum(k), Sacrifice_Fly = sum(sac), Batting_Average = round(Hits/ABs,3),
On_Base_Percentage = round((Hits+Walks)/(ABs+Walks+Sacrifice_Fly),3), Groundouts = sum(go), Flyouts = sum(fo))
pv_player_singles <- sample_n(singles, pv_ab_filtered$Singles[1])
pv_player_doubles <- sample_n(doubles, pv_ab_filtered$Doubles[1])
pv_player_triples <- sample_n(triples, pv_ab_filtered$Triples[1])
pv_player_homeruns <- sample_n(homeruns,pv_ab_filtered$Homeruns[1])
pv_player_flyouts <- sample_n(flyouts,pv_ab_filtered$Flyouts[1])
pv_player_groundouts <- sample_n(groundouts,pv_ab_filtered$Groundouts[1])
plot_hits <- bind_rows(pv_player_homeruns,pv_player_singles, pv_player_doubles, pv_player_triples,
pv_player_flyouts, pv_player_groundouts)
View(plot_hits)
View(plot_hits)
source('~/Documents/GitHub/PBE/Codes/Coords.R')
load("R_Code_Exports/coords.RData")
runApp('Codes/HvP')
runApp()
runApp('Codes/HvP')
runApp('Codes/HvP')
runApp('Codes/HvP')
