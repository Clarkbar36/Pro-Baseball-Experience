c.all$rc <- round(((c.all$h+(c.all$bb + c.all$ibb + c.all$hp))*((1*c.all$sin)+(2*c.all$Dbl)+(3*c.all$Trp)+(4*c.all$hr)))/(c.all$ab+(c.all$bb + c.all$ibb + c.all$hp)),0)
c.all$tb <- (1*c.all$sin)+(2*c.all$Dbl)+(3*c.all$Trp)+(4*c.all$hr)
c.all$slg <- round(c.all$tb/c.all$ab,3)
c.all$ops <- c.all$obp + c.all$slg
c.all$iso <- c.all$slg - c.all$avg
c.all$b_babip <- round((c.all$h - c.all$hr)/(c.all$ab - c.all$SO - c.all$hr+c.all$sf),3)
c.all$bat_k_pcnt <- round(c.all$SO / c.all$pa,2)
c.all$bat_bb_pcnt <- round(c.all$bb / c.all$pa,2)
c.all$bat_k_bb_pcnt <- c.all$bat_k_pcnt - c.all$bat_bb_pcnt
c.all$era <- round(((9*c.all$er)/c.all$ip),3)
c.all$whip <- round((c.all$ha + c.all$walks)/c.all$ip,3)
c.all$p_babip <- round((c.all$ha - c.all$hra)/(c.all$p_ab - c.all$k - c.all$hra+c.all$p_sf),3)
c.all$fip <- round(((13*c.all$hra+3*c.all$walks-2*c.all$k)/c.all$ip)+3.1,2)
c.all$HR_per_9 <- round(9 * (c.all$hra/c.all$ip),2)
c.all$R_per_9 <- round(9 * (c.all$p_r/c.all$ip),2)
c.all$H_per_9 <- round(9 * (c.all$ha/c.all$ip),2)
c.all$K_per_9 <- round(9 * (c.all$k/c.all$ip),2)
c.all$BB_per_9 <- round(9 * (c.all$walks/c.all$ip),2)
c.all$pit_k_pcnt <- round(c.all$k / c.all$p_ab,2)
c.all$pit_bb_pcnt <- round(c.all$walks / c.all$p_ab,2)
c.all$pit_k_bb_pcnt <- c.all$pit_k_pcnt - c.all$pit_bb_pcnt
c.all$win_percent <- round(c.all$w / (c.all$w + c.all$l),3)
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
c.all <- merge(c.all, c.pl_name_lookup, by = 'player_id')
c.all$full_name <- str_replace_all(c.all$full_name,"-","")
c.leagues <- read.csv("leagues.csv", header = TRUE)
c.leagues <- c.leagues[c(1,3)]
colnames(c.leagues)[colnames(c.leagues) == 'abbr'] <- 'league_abbr'
c.all <- merge(c.all,c.leagues,all.x = TRUE)
c.all[is.nan(c.all)] <- 0
c.all$zr[is.na(c.all$zr)] <- 0
c.all$winloss <- paste(c.all$w,"-",c.all$l)
c.all$name_pos <- paste(c.all$full_name, "-",c.all$position_name)
c.all$url <- paste("http://www.pbesim.com/players/player_",c.all$player_id,".html", sep = "")
c.all$pitch_hit <- ifelse(c.all$position_name != 'P','Hitter','Pitcher')
c.all.hit <- subset(c.all,c.all$pitch_hit == 'Hitter')
c.all.pitch <- subset(c.all, c.all$pitch_hit == "Pitcher")
View(c.all.hit)
View(c.all.pitch)
View(c.all.hit)
View(c.all.hit)
View(c.all.pitch)
source('~/Box/Alissa Private Folder/Alex/PBE/Codes/All-Time_Stats.R')
source('~/Box/Alissa Private Folder/Alex/PBE/Codes/All-Time_Stats.R')
# pitcher - Set variables to subset and graph by
pitch.statistic <- "Win Percent"
pitch.obs <- 10
pitch.lg <- "PBE"
#pitcher function
pitcher.leaderboard <- function(x,y,z){
# subset pitcher dataframe by league
pitch.plt.df <- subset(c.all.pitch,c.all.pitch$league_abbr == pitch.lg)
# if PBE subset dataframe by Innings Pitched greater than or equal to 400, if MiLPBE subset by IP greater than or equal to 160
if(pitch.statistic %in% c('ERA', 'WHIP','BABIP','FIP','HR per 9','R per 9','Hits per 9','BB per 9','BB percent', 'Win Percent')){
mean_ip <- round(mean(pitch.plt.df$`Innings Pitched`),0)
pitch.plt.df <- subset(pitch.plt.df,pitch.plt.df$`Innings Pitched`>=mean_ip)
} else {
pitch.plt.df <- pitch.plt.df
}
# find which column number the statistic variable is in the dataframe
num <- which( colnames(pitch.plt.df)==pitch.statistic)
# if statistic is a ratio, reverse order
if(pitch.statistic %in% c('ERA', 'WHIP','BABIP','FIP','HR per 9','R per 9','Hits per 9','BB per 9','BB percent')){
pitch.plt.df <- top_n(pitch.plt.df, n=pitch.obs, -pitch.plt.df[num])
} else {
pitch.plt.df <- top_n(pitch.plt.df, n=pitch.obs, pitch.plt.df[num])
}
# condense dataframe down to 2 columns: name & position, the statistic variable column
pitch.plt.df <- pitch.plt.df[c(37,as.numeric(num))]
#rename columns to x,y for easier plotting
colnames(pitch.plt.df) <- c("x","y")
# plotting funtion, if statistic is ratio, plot in reverse order
if(pitch.statistic %in% c('ERA', 'WHIP','BABIP','FIP','HR per 9','R per 9','Hits per 9','BB per 9','BB percent')){
p <-  ggplot(pitch.plt.df, aes(x=reorder(x,-y), y=y,fill=y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(pitch.plt.df$x),"All-Time"), subtitle =paste(pitch.statistic,"-", pitch.lg)) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=pitch.plt.df,aes(x=x,y=y,label=y),size = 3, hjust=1, colour = "white") +
scale_y_continuous(toupper(pitch.statistic)) +
theme(axis.title.y = element_blank()) +
theme(legend.position = "none") +
scale_fill_gradient(low = "red", high =  "dark blue") +
coord_flip()
p
} else {
p <-  ggplot(pitch.plt.df, aes(x=reorder(x,y), y=y,fill=y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(pitch.plt.df$x),"All-Time"), subtitle =paste(pitch.statistic,"-", pitch.lg))  +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=pitch.plt.df,aes(x=x,y=y,label=y),size = 3, hjust=1, colour = "white") +
scale_y_continuous(toupper(pitch.statistic)) +
theme(axis.title.y = element_blank()) +
theme(legend.position = "none") +
scale_fill_gradient(low = "red", high =  "dark blue") +
coord_flip()
p
}
}
# pitcher - run function to create graph
pitcher.leaderboard(x = pitcher.statistic, y = pitcher.obs, z = pitcher.lg)
# subset pitcher dataframe by league
pitch.plt.df <- subset(c.all.pitch,c.all.pitch$league_abbr == pitch.lg)
# if PBE subset dataframe by Innings Pitched greater than or equal to 400, if MiLPBE subset by IP greater than or equal to 160
if(pitch.statistic %in% c('ERA', 'WHIP','BABIP','FIP','HR per 9','R per 9','Hits per 9','BB per 9','BB percent', 'Win Percent')){
mean_ip <- round(mean(pitch.plt.df$`Innings Pitched`),0)
pitch.plt.df <- subset(pitch.plt.df,pitch.plt.df$`Innings Pitched`>=mean_ip)
} else {
pitch.plt.df <- pitch.plt.df
}
# find which column number the statistic variable is in the dataframe
num <- which( colnames(pitch.plt.df)==pitch.statistic)
# if statistic is a ratio, reverse order
if(pitch.statistic %in% c('ERA', 'WHIP','BABIP','FIP','HR per 9','R per 9','Hits per 9','BB per 9','BB percent')){
pitch.plt.df <- top_n(pitch.plt.df, n=pitch.obs, -pitch.plt.df[num])
} else {
pitch.plt.df <- top_n(pitch.plt.df, n=pitch.obs, pitch.plt.df[num])
}
# condense dataframe down to 2 columns: name & position, the statistic variable column
pitch.plt.df <- pitch.plt.df[c(37,as.numeric(num))]
View(pitch.plt.df)
# subset pitcher dataframe by league
pitch.plt.df <- subset(c.all.pitch,c.all.pitch$league_abbr == pitch.lg)
# if PBE subset dataframe by Innings Pitched greater than or equal to 400, if MiLPBE subset by IP greater than or equal to 160
if(pitch.statistic %in% c('ERA', 'WHIP','BABIP','FIP','HR per 9','R per 9','Hits per 9','BB per 9','BB percent', 'Win Percent')){
mean_ip <- round(mean(pitch.plt.df$`Innings Pitched`),0)
pitch.plt.df <- subset(pitch.plt.df,pitch.plt.df$`Innings Pitched`>=mean_ip)
} else {
pitch.plt.df <- pitch.plt.df
}
# find which column number the statistic variable is in the dataframe
num <- which( colnames(pitch.plt.df)==pitch.statistic)
# if statistic is a ratio, reverse order
if(pitch.statistic %in% c('ERA', 'WHIP','BABIP','FIP','HR per 9','R per 9','Hits per 9','BB per 9','BB percent')){
pitch.plt.df <- top_n(pitch.plt.df, n=pitch.obs, -pitch.plt.df[num])
} else {
pitch.plt.df <- top_n(pitch.plt.df, n=pitch.obs, pitch.plt.df[num])
}
View(pitch.plt.df)
#pitcher function
pitcher.leaderboard <- function(x,y,z){
# subset pitcher dataframe by league
pitch.plt.df <- subset(c.all.pitch,c.all.pitch$league_abbr == pitch.lg)
# if PBE subset dataframe by Innings Pitched greater than or equal to 400, if MiLPBE subset by IP greater than or equal to 160
if(pitch.statistic %in% c('ERA', 'WHIP','BABIP','FIP','HR per 9','R per 9','Hits per 9','BB per 9','BB percent', 'Win Percent')){
mean_ip <- round(mean(pitch.plt.df$`Innings Pitched`),0)
pitch.plt.df <- subset(pitch.plt.df,pitch.plt.df$`Innings Pitched`>=mean_ip)
} else {
pitch.plt.df <- pitch.plt.df
}
# find which column number the statistic variable is in the dataframe
num <- which( colnames(pitch.plt.df)==pitch.statistic)
# if statistic is a ratio, reverse order
if(pitch.statistic %in% c('ERA', 'WHIP','BABIP','FIP','HR per 9','R per 9','Hits per 9','BB per 9','BB percent')){
pitch.plt.df <- top_n(pitch.plt.df, n=pitch.obs, -pitch.plt.df[num])
} else {
pitch.plt.df <- top_n(pitch.plt.df, n=pitch.obs, pitch.plt.df[num])
}
# condense dataframe down to 2 columns: name & position, the statistic variable column
pitch.plt.df <- pitch.plt.df[c(39,as.numeric(num))]
#rename columns to x,y for easier plotting
colnames(pitch.plt.df) <- c("x","y")
# plotting funtion, if statistic is ratio, plot in reverse order
if(pitch.statistic %in% c('ERA', 'WHIP','BABIP','FIP','HR per 9','R per 9','Hits per 9','BB per 9','BB percent')){
p <-  ggplot(pitch.plt.df, aes(x=reorder(x,-y), y=y,fill=y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(pitch.plt.df$x),"All-Time"), subtitle =paste(pitch.statistic,"-", pitch.lg)) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=pitch.plt.df,aes(x=x,y=y,label=y),size = 3, hjust=1, colour = "white") +
scale_y_continuous(toupper(pitch.statistic)) +
theme(axis.title.y = element_blank()) +
theme(legend.position = "none") +
scale_fill_gradient(low = "red", high =  "dark blue") +
coord_flip()
p
} else {
p <-  ggplot(pitch.plt.df, aes(x=reorder(x,y), y=y,fill=y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(pitch.plt.df$x),"All-Time"), subtitle =paste(pitch.statistic,"-", pitch.lg))  +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=pitch.plt.df,aes(x=x,y=y,label=y),size = 3, hjust=1, colour = "white") +
scale_y_continuous(toupper(pitch.statistic)) +
theme(axis.title.y = element_blank()) +
theme(legend.position = "none") +
scale_fill_gradient(low = "red", high =  "dark blue") +
coord_flip()
p
}
}
# pitcher - run function to create graph
pitcher.leaderboard(x = pitcher.statistic, y = pitcher.obs, z = pitcher.lg)
#hitter function
hitter.leaderboard <- function(x,y,z){
# subset hitter dataframe by league
hit.plt.df <- subset(c.all.hit,c.all.hit$league_abbr == hit.lg)
# if PBE subset dataframe by plate appearances greater than or equal to 760, if MiLPBE subset by PA greater than or equal to 470
if(hit.lg == "PBE"){
hit.plt.df <- subset(hit.plt.df,hit.plt.df$`Plate Apperances`>=760)
} else {
hit.plt.df <- subset(hit.plt.df,hit.plt.df$`Plate Apperances`>=470)
}
# find which column number the statistic variable is in the dataframe
num <- which( colnames(hit.plt.df)==hit.statistic)
# if statistic is K percent or K-BB percent, take the bottom obs, players with lower k-percents are better
if(hit.statistic %in% c("K Percent", "K-BB Percent")){
hit.plt.df <- top_n(hit.plt.df, n=hit.obs, -hit.plt.df[num])
} else {
hit.plt.df <- top_n(hit.plt.df, n=hit.obs, hit.plt.df[num])
}
# condense dataframe down to 2 columns: name & position, the statistic variable column
hit.plt.df <- hit.plt.df[c(32,as.numeric(num))]
#rename columns to x,y for easier plotting
colnames(hit.plt.df) <- c("x","y")
# plotting funtion, if statistic is k percetn or k-bb percent, plot in reverse order
if(hit.statistic %in% c("K Percent", "K-BB Percent")){
p <-  ggplot(hit.plt.df, aes(x=reorder(x,-y), y=y,fill=y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(hit.plt.df$x),"All-Time"), subtitle =paste(hit.statistic,"-", hit.lg)) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=hit.plt.df,aes(x=x,y=y,label=y),size = 3, hjust=1, colour = "white") +
scale_y_continuous(toupper(hit.statistic)) +
theme(axis.title.y = element_blank()) +
theme(legend.position = "none") +
scale_fill_gradient(low = "red", high =  "dark blue") +
coord_flip()
p
} else {
p <-  ggplot(hit.plt.df, aes(x=reorder(x,y), y=y,fill=y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(hit.plt.df$x),"All-Time"), subtitle =paste(hit.statistic,"-", hit.lg))  +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=hit.plt.df,aes(x=x,y=y,label=y),size = 3, hjust=1, colour = "white") +
scale_y_continuous(toupper(hit.statistic)) +
theme(axis.title.y = element_blank()) +
theme(legend.position = "none") +
scale_fill_gradient(low = "red", high =  "dark blue") +
coord_flip()
p
}
}
# hitter - Set variables to subset and graph by
hit.statistic <- "Stolen Bases"
hit.obs <- 10
hit.lg <- "PBE"
# hitter - run function to create graph
hitter.leaderboard(x = hit.statistic, y = hit.obs, z = hit.lg)
# if PBE subset dataframe by plate appearances greater than or equal to 760, if MiLPBE subset by PA greater than or equal to 470
if(hit.lg == "PBE"){
hit.plt.df <- subset(hit.plt.df,hit.plt.df$`Plate Apperances`>=760)
} else {
hit.plt.df <- subset(hit.plt.df,hit.plt.df$`Plate Apperances`>=470)
}
# find which column number the statistic variable is in the dataframe
num <- which( colnames(hit.plt.df)==hit.statistic)
# subset hitter dataframe by league
hit.plt.df <- subset(c.all.hit,c.all.hit$league_abbr == hit.lg)
# if PBE subset dataframe by plate appearances greater than or equal to 760, if MiLPBE subset by PA greater than or equal to 470
if(hit.lg == "PBE"){
hit.plt.df <- subset(hit.plt.df,hit.plt.df$`Plate Apperances`>=760)
} else {
hit.plt.df <- subset(hit.plt.df,hit.plt.df$`Plate Apperances`>=470)
}
# find which column number the statistic variable is in the dataframe
num <- which( colnames(hit.plt.df)==hit.statistic)
# if statistic is K percent or K-BB percent, take the bottom obs, players with lower k-percents are better
if(hit.statistic %in% c("K Percent", "K-BB Percent")){
hit.plt.df <- top_n(hit.plt.df, n=hit.obs, -hit.plt.df[num])
} else {
hit.plt.df <- top_n(hit.plt.df, n=hit.obs, hit.plt.df[num])
}
# subset hitter dataframe by league
hit.plt.df <- subset(c.all.hit,c.all.hit$league_abbr == hit.lg)
View(c.all.hit)
c.all.hit <- subset(c.all,c.all$pitch_hit == 'Hitter')
View(c.all.hit)
c.all.hit <- c.all.hit[-c(19:36,51:63,67)]
colnames(c.all.hit)[colnames(c.all.hit) == 'ab'] <- 'At Bats'
colnames(c.all.hit)[colnames(c.all.hit) == 'h'] <- 'Hits'
colnames(c.all.hit)[colnames(c.all.hit) == 'SO'] <- 'Strikeouts'
colnames(c.all.hit)[colnames(c.all.hit) == 'pa'] <- 'Plate Apperances'
colnames(c.all.hit)[colnames(c.all.hit) == 'g'] <- 'Games'
colnames(c.all.hit)[colnames(c.all.hit) == 'Dbl'] <- 'Doubles'
colnames(c.all.hit)[colnames(c.all.hit) == 'Trp'] <- 'Triples'
colnames(c.all.hit)[colnames(c.all.hit) == 'hr'] <- 'Homeruns'
colnames(c.all.hit)[colnames(c.all.hit) == 'r'] <- 'Runs'
colnames(c.all.hit)[colnames(c.all.hit) == 'rbi'] <- 'RBI'
colnames(c.all.hit)[colnames(c.all.hit) == 'sb'] <- 'Stolen Bases'
colnames(c.all.hit)[colnames(c.all.hit) == 'bb'] <- 'Walks'
colnames(c.all.hit)[colnames(c.all.hit) == 'zr'] <- 'Zone Rating'
colnames(c.all.hit)[colnames(c.all.hit) == 'war'] <- 'WAR'
colnames(c.all.hit)[colnames(c.all.hit) == 'avg'] <- 'Average'
colnames(c.all.hit)[colnames(c.all.hit) == 'obp'] <- 'OBP'
colnames(c.all.hit)[colnames(c.all.hit) == 'sin'] <- 'Single'
colnames(c.all.hit)[colnames(c.all.hit) == 'rc'] <- 'Runs Created'
colnames(c.all.hit)[colnames(c.all.hit) == 'tb'] <- 'Total Bases'
colnames(c.all.hit)[colnames(c.all.hit) == 'slg'] <- 'SLG'
colnames(c.all.hit)[colnames(c.all.hit) == 'ops'] <- 'OPS'
colnames(c.all.hit)[colnames(c.all.hit) == 'iso'] <- 'ISO'
colnames(c.all.hit)[colnames(c.all.hit) == 'b_babip'] <- 'BABIP'
colnames(c.all.hit)[colnames(c.all.hit) == 'bat_k_pcnt'] <- 'K Percent'
colnames(c.all.hit)[colnames(c.all.hit) == 'bat_bb_pcnt'] <- 'BB Percent'
colnames(c.all.hit)[colnames(c.all.hit) == 'bat_k_bb_pcnt'] <- 'K-BB Percent'
#hitter function
hitter.leaderboard <- function(x,y,z){
# subset hitter dataframe by league
hit.plt.df <- subset(c.all.hit,c.all.hit$league_abbr == hit.lg)
# if PBE subset dataframe by plate appearances greater than or equal to 760, if MiLPBE subset by PA greater than or equal to 470
if(hit.lg == "PBE"){
hit.plt.df <- subset(hit.plt.df,hit.plt.df$`Plate Apperances`>=760)
} else {
hit.plt.df <- subset(hit.plt.df,hit.plt.df$`Plate Apperances`>=470)
}
# find which column number the statistic variable is in the dataframe
num <- which( colnames(hit.plt.df)==hit.statistic)
# if statistic is K percent or K-BB percent, take the bottom obs, players with lower k-percents are better
if(hit.statistic %in% c("K Percent", "K-BB Percent")){
hit.plt.df <- top_n(hit.plt.df, n=hit.obs, -hit.plt.df[num])
} else {
hit.plt.df <- top_n(hit.plt.df, n=hit.obs, hit.plt.df[num])
}
# condense dataframe down to 2 columns: name & position, the statistic variable column
hit.plt.df <- hit.plt.df[c(32,as.numeric(num))]
#rename columns to x,y for easier plotting
colnames(hit.plt.df) <- c("x","y")
# plotting funtion, if statistic is k percetn or k-bb percent, plot in reverse order
if(hit.statistic %in% c("K Percent", "K-BB Percent")){
p <-  ggplot(hit.plt.df, aes(x=reorder(x,-y), y=y,fill=y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(hit.plt.df$x),"All-Time"), subtitle =paste(hit.statistic,"-", hit.lg)) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=hit.plt.df,aes(x=x,y=y,label=y),size = 3, hjust=1, colour = "white") +
scale_y_continuous(toupper(hit.statistic)) +
theme(axis.title.y = element_blank()) +
theme(legend.position = "none") +
scale_fill_gradient(low = "red", high =  "dark blue") +
coord_flip()
p
} else {
p <-  ggplot(hit.plt.df, aes(x=reorder(x,y), y=y,fill=y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(hit.plt.df$x),"All-Time"), subtitle =paste(hit.statistic,"-", hit.lg))  +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=hit.plt.df,aes(x=x,y=y,label=y),size = 3, hjust=1, colour = "white") +
scale_y_continuous(toupper(hit.statistic)) +
theme(axis.title.y = element_blank()) +
theme(legend.position = "none") +
scale_fill_gradient(low = "red", high =  "dark blue") +
coord_flip()
p
}
}
# hitter - run function to create graph
hitter.leaderboard(x = hit.statistic, y = hit.obs, z = hit.lg)
# subset hitter dataframe by league
hit.plt.df <- subset(c.all.hit,c.all.hit$league_abbr == hit.lg)
# if PBE subset dataframe by plate appearances greater than or equal to 760, if MiLPBE subset by PA greater than or equal to 470
if(hit.lg == "PBE"){
hit.plt.df <- subset(hit.plt.df,hit.plt.df$`Plate Apperances`>=760)
} else {
hit.plt.df <- subset(hit.plt.df,hit.plt.df$`Plate Apperances`>=470)
}
# find which column number the statistic variable is in the dataframe
num <- which( colnames(hit.plt.df)==hit.statistic)
# if statistic is K percent or K-BB percent, take the bottom obs, players with lower k-percents are better
if(hit.statistic %in% c("K Percent", "K-BB Percent")){
hit.plt.df <- top_n(hit.plt.df, n=hit.obs, -hit.plt.df[num])
} else {
hit.plt.df <- top_n(hit.plt.df, n=hit.obs, hit.plt.df[num])
}
View(hit.plt.df)
#hitter function
hitter.leaderboard <- function(x,y,z){
# subset hitter dataframe by league
hit.plt.df <- subset(c.all.hit,c.all.hit$league_abbr == hit.lg)
# if PBE subset dataframe by plate appearances greater than or equal to 760, if MiLPBE subset by PA greater than or equal to 470
if(hit.lg == "PBE"){
hit.plt.df <- subset(hit.plt.df,hit.plt.df$`Plate Apperances`>=760)
} else {
hit.plt.df <- subset(hit.plt.df,hit.plt.df$`Plate Apperances`>=470)
}
# find which column number the statistic variable is in the dataframe
num <- which( colnames(hit.plt.df)==hit.statistic)
# if statistic is K percent or K-BB percent, take the bottom obs, players with lower k-percents are better
if(hit.statistic %in% c("K Percent", "K-BB Percent")){
hit.plt.df <- top_n(hit.plt.df, n=hit.obs, -hit.plt.df[num])
} else {
hit.plt.df <- top_n(hit.plt.df, n=hit.obs, hit.plt.df[num])
}
# condense dataframe down to 2 columns: name & position, the statistic variable column
hit.plt.df <- hit.plt.df[c(36,as.numeric(num))]
#rename columns to x,y for easier plotting
colnames(hit.plt.df) <- c("x","y")
# plotting funtion, if statistic is k percetn or k-bb percent, plot in reverse order
if(hit.statistic %in% c("K Percent", "K-BB Percent")){
p <-  ggplot(hit.plt.df, aes(x=reorder(x,-y), y=y,fill=y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(hit.plt.df$x),"All-Time"), subtitle =paste(hit.statistic,"-", hit.lg)) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=hit.plt.df,aes(x=x,y=y,label=y),size = 3, hjust=1, colour = "white") +
scale_y_continuous(toupper(hit.statistic)) +
theme(axis.title.y = element_blank()) +
theme(legend.position = "none") +
scale_fill_gradient(low = "red", high =  "dark blue") +
coord_flip()
p
} else {
p <-  ggplot(hit.plt.df, aes(x=reorder(x,y), y=y,fill=y))+
geom_bar(stat='identity')+
ggtitle(paste("Top",length(hit.plt.df$x),"All-Time"), subtitle =paste(hit.statistic,"-", hit.lg))  +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=hit.plt.df,aes(x=x,y=y,label=y),size = 3, hjust=1, colour = "white") +
scale_y_continuous(toupper(hit.statistic)) +
theme(axis.title.y = element_blank()) +
theme(legend.position = "none") +
scale_fill_gradient(low = "red", high =  "dark blue") +
coord_flip()
p
}
}
# hitter - run function to create graph
hitter.leaderboard(x = hit.statistic, y = hit.obs, z = hit.lg)
source("~/Box/Alissa Private Folder/Alex/PBE/Codes/Season_Stats.R")
# hitter - Set variables to subset and graph by
s.hit.statistic <- "K Percent"
s.hit.obs <- 15
s.hit.lg <- "PBE"
s.hit.year <- 2026
#hitter function
s.hitter.leaderboard <- function(w,x,y,z){
# subset hitter dataframe by league
s.hit.plt.df <- subset(s.all.hit,s.all.hit$league_abbr == s.hit.lg & s.all.hit$year == s.hit.year)
# if PBE subset dataframe by plate appearances greater than or equal to 760, if MiLPBE subset by PA greater than or equal to 470
if(s.hit.lg == "PBE"){
mean_pa <- round(mean(s.hit.plt.df$`Plate Apperances`),0)
s.hit.plt.df <- subset(s.hit.plt.df,s.hit.plt.df$`Plate Apperances`>=mean_pa)
} else {
s.hit.plt.df <- subset(s.hit.plt.df,s.hit.plt.df$`Plate Apperances`>=mean_pa)
}
# find which column number the statistic variable is in the dataframe
num <- which( colnames(s.hit.plt.df)==s.hit.statistic)
# if statistic is K percent or K-BB percent, take the bottom obs, players with lower k-percents are better
if(s.hit.statistic %in% c("K Percent", "K-BB Percent")){
s.hit.plt.df <- top_n(s.hit.plt.df, n=s.hit.obs, -s.hit.plt.df[num])
} else {
s.hit.plt.df <- top_n(s.hit.plt.df, n=s.hit.obs, s.hit.plt.df[num])
}
# condense dataframe down to 2 columns: team & name & position, the statistic variable column
s.hit.plt.df <- s.hit.plt.df[c(42,as.numeric(num))]
#rename columns to x,y for easier plotting
colnames(s.hit.plt.df) <- c("x","y")
# plotting funtion, if statistic is k percetn or k-bb percent, plot in reverse order
if(s.hit.statistic %in% c("K Percent", "K-BB Percent")){
p <-  ggplot(s.hit.plt.df, aes(x=reorder(x,-y), y=y,fill=y))+
geom_bar(stat='identity')+
ggtitle(paste(s.hit.year,"Season -","Top",length(s.hit.plt.df$x)), subtitle =paste(s.hit.statistic,"-", s.hit.lg)) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=s.hit.plt.df,aes(x=x,y=y,label=y),size = 3, hjust=1, colour = "white") +
scale_y_continuous(toupper(s.hit.statistic)) +
theme(axis.title.y = element_blank()) +
theme(legend.position = "none") +
scale_fill_gradient(low = "red", high =  "dark blue") +
coord_flip()
p
} else {
p <-  ggplot(s.hit.plt.df, aes(x=reorder(x,y), y=y,fill=y))+
geom_bar(stat='identity')+
ggtitle(paste(s.hit.year,"Season -","Top",length(s.hit.plt.df$x)), subtitle =paste(s.hit.statistic,"-", s.hit.lg)) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = .5)) +
geom_text(data=s.hit.plt.df,aes(x=x,y=y,label=y),size = 3, hjust=1, colour = "white") +
scale_y_continuous(toupper(s.hit.statistic)) +
theme(axis.title.y = element_blank()) +
theme(legend.position = "none") +
scale_fill_gradient(low = "red", high =  "dark blue") +
coord_flip()
p
}
}
# hitter - run function to create graph
s.hitter.leaderboard(w = s.hit.year, x = s.hit.statistic, y = s.hit.obs, z = s.hit.lg)
source('~/Box/Alissa Private Folder/Alex/PBE/Codes/Leaderboard_App.R')
source('~/Box/Alissa Private Folder/Alex/PBE/Codes/Leaderboard_App.R')
# hitter - run function to create graph
hitter.leaderboard(x = hit.statistic, y = hit.obs, z = hit.lg)
# hitter - run function to create graph
hitter.leaderboard(x = hit.statistic, y = hit.obs, z = hit.lg)
# pitcher - run function to create graph
pitcher.leaderboard(x = pitcher.statistic, y = pitcher.obs, z = pitcher.lg)
# hitter - run function to create graph
s.hitter.leaderboard(w = s.hit.year, x = s.hit.statistic, y = s.hit.obs, z = s.hit.lg)
# pitcher - run function to create graph
s.pitcher.leaderboard(w = s.pitch.year, x = s.pitch.statistic, y = s.pitch.obs, z = s.pitch.lg)
test <- read.csv("team_pitching_stats.csv")
View(test)
test <- read.csv("team_bullpen_pitching_stats.csv")
View(test)
test1 <- read.csv("team_bullpen_pitching_stats.csv")
test <- read.csv("team_pitching_stats.csv")
View(test)
View(test1)
test1 <- read.csv("team_fielding_stats_stats.csv")
View(test1)
library(shiny); runApp('~/Documents/GitHub/team-project-team-2/App_Tweet_Predictor.R')
source("/Codes/All-Time_Stats.R",local = TRUE)
setwd("~/Documents/GitHub/PBE/Exports")
setwd("~/Documents/GitHub/PBE/Exports/")
games <- read.csv('games.csv', header = TRUE, sep = ',')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
